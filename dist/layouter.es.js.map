{"version":3,"file":"layouter.es.js","sources":["../src/helpers/breakpointsNums.ts","../src/helpers/createScopeStyles.ts","../src/helpers/scopesStylesBuilder.ts","../src/helpers/breakpointsOrdered.ts","../src/config/main.ts","../src/helpers/prepareParam.ts","../src/helpers/regError.ts","../src/helpers/calPercentage.ts","../src/helpers/getScopeByclassName.ts","../src/methods/insertRules.ts","../src/config/flex.ts","../src/helpers/percentageConverter.ts","../src/helpers/createStyles.ts","../src/helpers/nameCleaner.ts","../src/helpers/buildCss.ts","../src/methods/buildCols.ts","../src/methods/buildFlex.ts","../src/helpers/processedNumber.ts","../src/helpers/buildAttr.ts","../src/methods/buildPad.ts","../src/methods/buildPadTop.ts","../src/methods/buildPadRight.ts","../src/methods/buildPadBottom.ts","../src/methods/buildPadLeft.ts","../src/methods/buildMar.ts","../src/methods/buildMarTop.ts","../src/methods/buildMarRight.ts","../src/methods/buildMarBottom.ts","../src/methods/buildMarLeft.ts","../src/methods/buildMaxWidth.ts","../src/methods/buildMaxHeight.ts","../src/methods/buildMinWidth.ts","../src/methods/buildMinHeight.ts","../src/methods/buildHeight.ts","../src/methods/buildWidth.ts","../src/config/position.ts","../src/methods/buildPosition.ts","../src/methods/buildTop.ts","../src/methods/buildRight.ts","../src/methods/buildBottom.ts","../src/methods/buildLeft.ts","../src/config/processors.ts","../src/methods/getParameters.ts","../src/methods/build.ts","../src/utils/addClasses.ts","../src/utils/removeAttr.ts","../src/helpers/eventReady.ts","../src/methods/set.ts","../src/methods/setFlex.ts","../src/methods/SetCols.ts","../src/methods/setAttr.ts","../src/methods/setHeight.ts","../src/methods/setMarBottom.ts","../src/methods/setMarLeft.ts","../src/methods/setMarRight.ts","../src/methods/setMar.ts","../src/methods/setMarTop.ts","../src/methods/setMaxWidth.ts","../src/methods/setMinHeight.ts","../src/methods/setMinWidth.ts","../src/methods/setPadBottom.ts","../src/methods/setPadLeft.ts","../src/methods/setPadRight.ts","../src/methods/setPad.ts","../src/methods/setPadTop.ts","../src/methods/setWidth.ts","../src/methods/setMaxHeight.ts","../src/methods/setPosition.ts","../src/methods/setTop.ts","../src/methods/setRight.ts","../src/methods/setBottom.ts","../src/methods/setLeft.ts","../src/methods/reset.ts","../src/helpers/searchAndProcess.ts","../src/helpers/mainObserver.ts","../src/layouter.ts"],"sourcesContent":["export type TNumProp = 'width' | 'cols';\r\n\r\nexport interface IBreakpoint {\r\n  alias: string;\r\n  width: number;\r\n}\r\n\r\nexport interface IBreakpoints {\r\n  [alias: string]: {\r\n    width: number;\r\n    cols: number;\r\n  };\r\n}\r\n\r\nexport interface IBreakpointObj {\r\n  [alias: string]: number;\r\n}\r\n\r\nconst breakpointsNums = (\r\n  objBps: IBreakpoints,\r\n  propName: TNumProp\r\n): IBreakpointObj => {\r\n  const sizes: IBreakpointObj = {};\r\n\r\n  if (propName === 'width') {\r\n    Object.keys(objBps)\r\n      .map((bp: string) => {\r\n        return {\r\n          alias: bp,\r\n          width: objBps[bp].width,\r\n        };\r\n      })\r\n      .sort((a: IBreakpoint, b: IBreakpoint) =>\r\n        a.width > b.width ? 1 : b.width > a.width ? -1 : 0\r\n      )\r\n      .forEach((bp: IBreakpoint, index: number) => {\r\n        sizes[bp.alias] = !index ? 0 : objBps[bp.alias][propName];\r\n      });\r\n  } else {\r\n    Object.keys(objBps).forEach((bp) => {\r\n      sizes[bp] = objBps[bp][propName];\r\n    });\r\n  }\r\n\r\n  return sizes;\r\n};\r\n\r\nexport default breakpointsNums;\r\n","export type TInsertion = 'before' | 'after' | 'append';\n\nexport interface ICreateScopeStyles {\n  bridge?: boolean;\n  bp: string;\n  insertionType: TInsertion;\n  node: HTMLElement;\n  context: Window & typeof globalThis;\n}\n\nexport interface IRCreateScopeStyles {\n  method:\n    | CSSStyleSheet\n    | {\n        insertRule: (ruleCss: string) => void;\n        rules: string[];\n      };\n  node: HTMLElement;\n}\n\nconst createScopeStyles = ({\n  bridge: withBridge,\n  bp,\n  insertionType,\n  node,\n  context,\n}: ICreateScopeStyles): IRCreateScopeStyles => {\n  let stylesScope = context.document.getElementById('layouter-' + bp);\n  if (!stylesScope) {\n    stylesScope = context.document.createElement('style');\n    stylesScope.appendChild(context.document.createTextNode('')); // WebKit hack :(\n    const nodeParent = node.parentNode as HTMLDivElement;\n    switch (insertionType) {\n      case 'before':\n        nodeParent.insertBefore(stylesScope, node);\n        break;\n      case 'after':\n        node.nextSibling\n          ? nodeParent.insertBefore(stylesScope, node.nextSibling)\n          : nodeParent.appendChild(stylesScope);\n        break;\n      case 'append':\n        node.appendChild(stylesScope);\n        break;\n    }\n    stylesScope.id = 'layouter-' + bp;\n  }\n\n  let bridge: IRCreateScopeStyles;\n  if (withBridge) {\n    bridge = {\n      method: (stylesScope as HTMLStyleElement).sheet as CSSStyleSheet,\n      node: stylesScope,\n    };\n  } else {\n    bridge = {\n      method: {\n        insertRule: (ruleCss: string) => {\n          (stylesScope as HTMLDivElement).appendChild(\n            context.document.createTextNode(ruleCss)\n          );\n        },\n        rules: [],\n      },\n      node: stylesScope,\n    };\n  }\n  return bridge;\n};\n\nexport default createScopeStyles;\n","import { IBreakpoints } from './breakpointsNums';\nimport createScopeStyles, { IRCreateScopeStyles } from './createScopeStyles';\n\nexport interface IScopes {\n  [name: string]: IRCreateScopeStyles;\n}\n\nexport interface IScopesStylesBuilder {\n  breakpoints: IBreakpoints;\n  bridge: boolean;\n  scope?: IScopes;\n  context: Window & typeof globalThis;\n}\n\nexport const scopesStylesBuilder = ({\n  breakpoints,\n  bridge,\n  scope,\n  context,\n}: IScopesStylesBuilder): IScopes => {\n  const scopes: IScopes = scope || {};\n  Object.keys(breakpoints).forEach((bp: string) => {\n    if (!scopes[bp]) {\n      scopes[bp] = createScopeStyles({\n        bridge: bridge,\n        bp,\n        insertionType: 'append',\n        node: context.document.body,\n        context,\n      });\n    }\n  });\n  return scopes;\n};\n","import { ICols } from '../config/main';\r\nimport { IBreakpoints } from './breakpointsNums';\r\n\r\nconst breakpointsOrdered = (bps: IBreakpoints, sizes: ICols) => {\r\n  const bpsOrdered: IBreakpoints = {};\r\n  Object.keys(sizes).forEach((bpName) => (bpsOrdered[bpName] = bps[bpName]));\r\n  return bpsOrdered;\r\n};\r\n\r\nexport default breakpointsOrdered;\r\n","import { ILayouter } from './../layouter';\nimport breakpointsNums, { IBreakpoints } from '../helpers/breakpointsNums';\nimport { IScopes, scopesStylesBuilder } from '../helpers/scopesStylesBuilder';\nimport breakpointsOrdered from '../helpers/breakpointsOrdered';\nimport { version } from '../../package.json';\n\nexport interface ICols {\n  [colAlias: string]: number;\n}\n\nexport interface IConfigUser {\n  prefix: string;\n  breakpoints: IBreakpoints;\n  bridge: boolean;\n  debug?: boolean;\n  ready?: (instance: ILayouter) => void;\n}\n\ninterface IConfigNumsIn {\n  bps: IBreakpoints;\n  bridge: boolean;\n  scope?: IScopes;\n  context: Window & typeof globalThis;\n}\n\ninterface IConfigNumsOut {\n  scope: IScopes;\n  cols: ICols;\n  sizes: ICols;\n  breakpoints: IBreakpoints;\n}\n\nexport interface IConfig\n  extends Omit<IConfigUser, 'breakpoints'>,\n    IConfigNumsOut {\n  context: Window & typeof globalThis;\n  styles: {\n    [className: string]: string;\n  };\n  version: string;\n}\n\ndeclare global {\n  interface Window {\n    layouterConfig: Partial<IConfigUser>;\n  }\n}\n\nconst breakpointsInit: IBreakpoints = {\n  xs: {\n    width: 360,\n    cols: 15,\n  },\n  sm: {\n    width: 600,\n    cols: 25,\n  },\n  md: {\n    width: 900,\n    cols: 31,\n  },\n  lg: {\n    width: 1200,\n    cols: 41,\n  },\n  xlg: {\n    width: 1536,\n    cols: 51,\n  },\n};\n\nexport let baseConfig: IConfigUser = {\n  prefix: '',\n  breakpoints: breakpointsInit,\n  bridge: true,\n  debug: true,\n};\n\nlet config: IConfig;\n\nconst configNums = ({\n  bps,\n  bridge,\n  scope,\n  context,\n}: IConfigNumsIn): IConfigNumsOut => {\n  const sizes = breakpointsNums(bps, 'width');\n  const finalBps = breakpointsOrdered(bps, sizes);\n  return {\n    sizes,\n    cols: breakpointsNums(bps, 'cols'),\n    scope: scopesStylesBuilder({\n      breakpoints: finalBps,\n      bridge,\n      scope: scope,\n      context,\n    }),\n    breakpoints: finalBps,\n  };\n};\n\nexport const setConfig = (\n  context: Window & typeof globalThis,\n  customCfg: Partial<IConfigUser> = {}\n): IConfig => {\n  const contextConfig = context.layouterConfig || {};\n\n  baseConfig = {\n    ...baseConfig,\n    ...customCfg,\n    ...contextConfig,\n  };\n\n  config = {\n    context,\n    ...baseConfig,\n    ...configNums({\n      bps: baseConfig.breakpoints,\n      bridge: baseConfig.bridge,\n      context,\n    }),\n    styles: {},\n    version,\n  };\n\n  return config;\n};\n\nconst getConfig = (): IConfig => {\n  return config;\n};\n\nexport const setStyles = (className: string, value: string) => {\n  config.styles[className] = value;\n};\n\nexport const updateConfig = (userConfig: Partial<IConfigUser>): IConfig => {\n  config = {\n    ...config,\n    ...userConfig,\n  };\n\n  if (userConfig.breakpoints) {\n    config = {\n      ...config,\n      ...configNums({\n        bps: config.breakpoints,\n        bridge: config.bridge,\n        scope: config.scope,\n        context: config.context,\n      }),\n    };\n  }\n\n  return config;\n};\n\nexport default getConfig;\n","import getConfig from '../config/main';\r\n\r\nexport interface IPrepareParamObj {\r\n  widthBp: boolean;\r\n  numbers: string;\r\n  breakPoints: string;\r\n  important: boolean;\r\n}\r\n\r\nconst prepareParam = (param: string): IPrepareParamObj => {\r\n  let bp: string;\r\n  let argParam = param;\r\n  let important = false;\r\n  const haveBp = argParam.includes('@');\r\n  if (haveBp) {\r\n    const bpSplited = argParam.split('@');\r\n    argParam = bpSplited[0];\r\n    bp = bpSplited[1];\r\n  } else {\r\n    const config = getConfig();\r\n    bp = Object.keys(config.breakpoints)[0];\r\n  }\r\n\r\n  if (param.includes('!')) {\r\n    important = true;\r\n    bp = bp.replace(/!/g, '');\r\n    argParam = argParam.replace(/!/g, '');\r\n  }\r\n\r\n  return {\r\n    widthBp: haveBp,\r\n    numbers: argParam,\r\n    breakPoints: bp,\r\n    important,\r\n  };\r\n};\r\n\r\nexport default prepareParam;\r\n","import config from '../config/main';\r\n\r\nconst regError = (\r\n  name: string,\r\n  message: string,\r\n  Node?: Element | HTMLElement\r\n): Error => {\r\n  const err = new Error();\r\n  err.name = name;\r\n  err.message = message;\r\n  const intConfig = config();\r\n  if (intConfig.debug) {\r\n    console.error(err);\r\n    if (Node) console.log(Node);\r\n  }\r\n  return err;\r\n};\r\n\r\nexport default regError;\r\n","const calPercentage = (n1: number, n2: number): string => {\r\n  const cal = (n1 * 100) / n2;\r\n  const haveDecimal = cal - Math.floor(cal) !== 0;\r\n  const result = haveDecimal ? cal.toFixed(3) : cal;\r\n  return result + '%';\r\n};\r\n\r\nexport default calPercentage;\r\n","import config from '../config/main';\nimport createScopeStyles, { IRCreateScopeStyles } from './createScopeStyles';\n\nconst getScopeByclassName = (className: string): IRCreateScopeStyles => {\n  const nameClass = className.replace(/!/g, '');\n  const atIndex = nameClass.indexOf('@');\n  const intConfig = config();\n  const scope = intConfig.scope;\n  const bridge = intConfig.bridge;\n  const context = intConfig.context;\n\n  // Haven´t a BP designed\n  if (atIndex === -1) {\n    const firstBp = Object.keys(intConfig.breakpoints)[0];\n    return scope[firstBp as string];\n  }\n\n  // Have a BP designed, a normal BP.\n  const bp = nameClass.substring(atIndex + 1);\n  if (!bp.includes('-')) return scope[bp]; // A simple BP (13/15@lg), not compound (like this: 13/15@sm-md).\n\n  // A BP until. Example 13/15@-md\n  if (bp.substring(0, 1) === '-') {\n    if (scope[bp]) return scope[bp]; // exists the Scope.\n    const bpUntil = bp.substring(1);\n    scope[bp] = createScopeStyles({\n      bridge: bridge,\n      bp,\n      insertionType: 'before',\n      node: scope[bpUntil].node,\n      context,\n    });\n    return scope[bp]; // returning a new scope created\n  }\n\n  // A BP from and until (a BP compound). Example: Example 13/15@sm-md\n  if (scope[bp]) {\n    return scope[bp]; // exists the Scope.\n  }\n\n  const fromBp = bp.split('-')[0];\n  scope[bp] = createScopeStyles({\n    bridge: bridge,\n    bp,\n    insertionType: 'after',\n    node: scope[fromBp].node,\n    context,\n  });\n\n  return scope[bp]; // returning a new scope compounded created\n};\n\nexport default getScopeByclassName;\n","import config, { setStyles } from '../config/main';\r\nimport { IStyles } from '../helpers/createStyles';\r\nimport getScopeByclassName from '../helpers/getScopeByclassName';\r\n\r\nconst insertRules = (objStyles: IStyles) => {\r\n  const intConfig = config();\r\n\r\n  for (const className in objStyles) {\r\n    if (!intConfig.styles[className]) {\r\n      const nodeScope = getScopeByclassName(className);\r\n      const valClass = objStyles[className];\r\n      const rules = nodeScope.method.rules;\r\n      nodeScope.method.insertRule(valClass, rules ? rules.length : 0);\r\n      setStyles(className, valClass); // saving in styles vault\r\n    }\r\n  }\r\n};\r\n\r\nexport default insertRules;\r\n","export const flexProsAndVals = {\r\n  jc: 'justify-content',\r\n  ai: 'align-items',\r\n  ce: 'center',\r\n  fs: 'flex-start',\r\n  fe: 'flex-end',\r\n  sb: 'space-between',\r\n  sa: 'space-around',\r\n  fw: 'flex-wrap',\r\n  nw: 'nowrap',\r\n  w: 'wrap',\r\n  wr: 'wrap-reverse',\r\n  fd: 'flex-direction',\r\n  r: 'row',\r\n  rr: 'row-reverse',\r\n  co: 'column',\r\n  cor: 'column-reverse',\r\n  fg: 'flex-grow',\r\n  fh: 'flex-shrink',\r\n  as: 'align-self',\r\n  or: 'order',\r\n  au: 'auto',\r\n  st: 'stretch',\r\n  bl: 'baseline',\r\n  in: 'initial',\r\n  ih: 'inherit',\r\n};\r\n\r\nexport const flexAttrsSelf = ['fg', 'fh', 'or'];\r\n","const percentageConverter = (percentage: string) => {\r\n  return '0¯' + percentage.replace('%', '');\r\n};\r\n\r\nexport default percentageConverter;\r\n","import { flexAttrsSelf } from '../config/flex';\r\nimport config from '../config/main';\r\nimport { processors, TDirectiveName } from '../config/processors';\r\nimport { IBpCals } from './buildCss';\r\nimport percentageConverter from './percentageConverter';\r\n\r\nexport interface IStyles {\r\n  [name: string]: string;\r\n}\r\n\r\nconst createStyles = (directive: TDirectiveName, bps: IBpCals): IStyles => {\r\n  const intConfig = config();\r\n  const sizes = intConfig.sizes;\r\n  const prefix = intConfig.prefix;\r\n  const prop = processors[directive].ruleCss;\r\n  const styles: IStyles = {};\r\n\r\n  Object.keys(bps).forEach((bp) => {\r\n    // preparing the className\r\n    const shortNameClass = bps[bp].name;\r\n\r\n    // just if have a percentage\r\n    let nameClass = shortNameClass;\r\n    if (shortNameClass.includes('%')) {\r\n      nameClass = shortNameClass.replace(\r\n        shortNameClass,\r\n        percentageConverter(shortNameClass)\r\n      );\r\n    }\r\n\r\n    const finalPrefix = prefix ? prefix + '-' : '';\r\n    nameClass =\r\n      finalPrefix +\r\n      directive +\r\n      '-' +\r\n      nameClass\r\n        .replace(/\\//g, '\\\\/')\r\n        .replace(/:/g, '\\\\:')\r\n        .replace('@', '\\\\@')\r\n        .split('.')\r\n        .join('_');\r\n\r\n    // Property and value\r\n    let propAndVal;\r\n    if (directive === 'flex') {\r\n      propAndVal = bps[bp].value;\r\n      const flexImportant = shortNameClass.includes('!')\r\n        ? ';display:flex !important;'\r\n        : ';display:flex;';\r\n\r\n      // Searching a flex self inside. ['as' for 'align-self']\r\n      const attrsFlexSelfs = ['as']\r\n        .concat(flexAttrsSelf)\r\n        .filter((nameAttrFlex) => shortNameClass.includes(nameAttrFlex + ':'));\r\n      if (attrsFlexSelfs.length) {\r\n        // if the items number of flex selft (+1) is diferrent so exists other flex attribute. Example: as:ce jc:ce\r\n        if (attrsFlexSelfs.length + 1 !== shortNameClass.split(':').length) {\r\n          propAndVal += flexImportant;\r\n        }\r\n      } else {\r\n        propAndVal += flexImportant;\r\n      }\r\n    } else {\r\n      propAndVal = prop + ':' + bps[bp].value;\r\n    }\r\n\r\n    let rule = '@media screen and ';\r\n    let direct = false;\r\n    if (!bp.includes('-')) {\r\n      // no tiene until\r\n      if (sizes[bp]) {\r\n        rule += '(min-width: ' + sizes[bp] + 'px)';\r\n      } else {\r\n        rule = '.' + nameClass.replace(/!/g, '\\\\!') + '{' + propAndVal + '}';\r\n        direct = true;\r\n      }\r\n    } else {\r\n      const bpSplited = bp.split('-');\r\n      const bp1 = bpSplited[0];\r\n      if (bp1) rule += '(min-width: ' + sizes[bp1] + 'px) and ';\r\n      const bp2 = bpSplited[1];\r\n      rule += '(max-width: ' + (sizes[bp2] - 1) + 'px)';\r\n    }\r\n\r\n    if (!direct) {\r\n      rule += '{.' + nameClass.replace(/!/g, '\\\\!') + '{' + propAndVal + '}}';\r\n    }\r\n    styles[nameClass] = rule;\r\n  });\r\n  return styles;\r\n};\r\n\r\nexport default createStyles;\r\n","import { IStyles } from './createStyles';\n\nconst replaceList = [\n  ['/', ''],\n  ['\\\\', '/'],\n  ['/:', ':'],\n  ['\\\\:', ':'],\n  ['\\\\@', '@'],\n  ['/@', '@'],\n];\n\nconst nameCleaner = (objStyles: IStyles): IStyles => {\n  const obj: IStyles = {};\n  for (const name in objStyles) {\n    let newName = name;\n    replaceList.forEach((reItem) => {\n      newName = newName.split(reItem[0]).join(reItem[1]);\n    });\n    obj[newName] = objStyles[name];\n  }\n  return obj;\n};\n\nexport default nameCleaner;\n","import { TDirectiveName } from '../config/processors';\r\nimport insertRules from '../methods/insertRules';\r\nimport createStyles, { IStyles } from './createStyles';\r\nimport nameCleaner from './nameCleaner';\r\n\r\nexport interface IRBuildStyles {\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nexport interface IBpCals {\r\n  [bpName: string]: IRBuildStyles;\r\n}\r\n\r\nexport interface IBuildCss {\r\n  type: TDirectiveName;\r\n  bps: IBpCals;\r\n  deep: boolean;\r\n}\r\n\r\nconst buildCss = (data: IBuildCss): IStyles => {\r\n  // creating the styles\r\n  const objStyles = createStyles(data.type, data.bps);\r\n\r\n  // Inserting CSS rules\r\n  if (data.deep) {\r\n    insertRules(objStyles);\r\n  }\r\n\r\n  // name classes cleaner\r\n  return nameCleaner(objStyles);\r\n};\r\n\r\nexport default buildCss;\r\n","import prepareParam from '../helpers/prepareParam';\r\nimport regError from '../helpers/regError';\r\nimport calPercentage from '../helpers/calPercentage';\r\n\r\nimport buildCss, { IBpCals } from '../helpers/buildCss';\r\nimport getConfig from '../config/main';\r\nimport { IStyles } from '../helpers/createStyles';\r\n\r\nconst buildCols = (values: string, insertStyles = false): IStyles | Error => {\r\n  let cols: number[];\r\n  let bp;\r\n  const bpCals: IBpCals = {};\r\n  const config = getConfig();\r\n\r\n  // Getting numbers\r\n  let selectorName, propValue, paramPrepared;\r\n  const directBp = Object.keys(config.breakpoints)[0];\r\n\r\n  let err: boolean | Error = false;\r\n\r\n  for (const item of values.split(' ')) {\r\n    let param = item;\r\n    selectorName = param;\r\n    paramPrepared = prepareParam(param);\r\n    bp = paramPrepared.breakPoints;\r\n    param = paramPrepared.numbers;\r\n\r\n    if (param.includes('/')) {\r\n      const paramSplited = param.split('/');\r\n      cols = [Number(paramSplited[0]), Number(paramSplited[1])];\r\n    } else {\r\n      if (paramPrepared.widthBp) {\r\n        if (bp.includes('-')) {\r\n          err = regError(\r\n            'SyntaxError',\r\n            \"You can't determine a 'until breakpoint' when use the explicit columns max: \" +\r\n              values\r\n          );\r\n          break;\r\n        } else {\r\n          cols = [Number(param), config.cols[bp] as number];\r\n        }\r\n      } else {\r\n        cols = [Number(param), config.cols[directBp] as number];\r\n      }\r\n    }\r\n\r\n    propValue = calPercentage(cols[0], cols[1]);\r\n    if (paramPrepared.important) propValue += ' !important';\r\n\r\n    bpCals[bp] = {\r\n      name: selectorName,\r\n      value: propValue,\r\n    };\r\n  }\r\n\r\n  if (err) return err;\r\n\r\n  // Building the classNames and the styles to use.\r\n  return buildCss({\r\n    type: 'cols',\r\n    bps: bpCals,\r\n    deep: insertStyles,\r\n  });\r\n};\r\n\r\nexport default buildCols;\r\n","import { flexAttrsSelf, flexProsAndVals } from '../config/flex';\r\nimport getConfig from '../config/main';\r\n\r\nimport buildCss, { IBpCals } from '../helpers/buildCss';\r\nimport { IStyles } from '../helpers/createStyles';\r\nimport prepareParam from '../helpers/prepareParam';\r\nimport regError from '../helpers/regError';\r\n\r\nconst buildFlex = (valFlex: string, insertStyles = false): IStyles | Error => {\r\n  const bpCals: IBpCals = {};\r\n\r\n  // Getting numbers\r\n  let err: boolean | Error = false;\r\n  const config = getConfig();\r\n  const firstBp = Object.keys(config.breakpoints)[0];\r\n\r\n  for (const param of valFlex.split(' ')) {\r\n    let propVal;\r\n    let selectorName = param;\r\n    const paramPrepared = prepareParam(param);\r\n    const bpNames = paramPrepared.breakPoints;\r\n    const flexSplited = paramPrepared.numbers.split(':');\r\n    const nameProp = flexSplited[0] as keyof typeof flexProsAndVals; // 'fc' o 'or'\r\n    const valProp = flexSplited[1] as keyof typeof flexProsAndVals; // 'ce' o '1'\r\n\r\n    if (!flexAttrsSelf.includes(nameProp)) {\r\n      if (!flexProsAndVals[nameProp]) {\r\n        err = regError(\r\n          'Non-existent Alias',\r\n          \"Don't exists the alias '\" + nameProp + \"' in Flex vault.\"\r\n        );\r\n        break;\r\n      }\r\n      if (!flexProsAndVals[valProp]) {\r\n        err = regError(\r\n          'Non-existent Alias',\r\n          \"Don't exists the alias '\" + valProp + \"' in Flex vault.\"\r\n        );\r\n        break;\r\n      }\r\n      propVal = flexProsAndVals[nameProp] + ':' + flexProsAndVals[valProp];\r\n    } else {\r\n      propVal = flexProsAndVals[nameProp] + ':' + valProp;\r\n    }\r\n\r\n    if (paramPrepared.important) propVal += ' !important';\r\n\r\n    if (!bpCals[bpNames]) {\r\n      bpCals[bpNames] = {\r\n        name: selectorName,\r\n        value: propVal,\r\n      };\r\n    } else {\r\n      if (selectorName.includes('@')) selectorName = selectorName.split('@')[0];\r\n      const sufixBp = bpNames === firstBp ? '' : '@' + bpNames;\r\n      bpCals[bpNames].name =\r\n        bpCals[bpNames].name.split('@')[0] + '-' + selectorName + sufixBp;\r\n      bpCals[bpNames].value += ';' + propVal;\r\n    }\r\n  }\r\n\r\n  if (err) return err;\r\n\r\n  // Building the classNames and the styles to use.\r\n  return buildCss({\r\n    type: 'flex',\r\n    bps: bpCals,\r\n    deep: insertStyles,\r\n  });\r\n};\r\n\r\nexport default buildFlex;\r\n","import calPercentage from './calPercentage';\n\nconst relativeMeasures = ['%', 'rem', 'em', 'ex', 'vw', 'vh', 'pt', 'cm', 'pc'];\n\nconst processedNumber = (n: string) => {\n  let nProcessed;\n  if (n.includes('/')) {\n    nProcessed = n.split('/');\n    nProcessed = calPercentage(\n      parseFloat(nProcessed[0]),\n      parseFloat(nProcessed[1])\n    );\n  } else if (n === 'auto') {\n    nProcessed = 'auto';\n  } else {\n    const relativeUnits = relativeMeasures.filter((unit) => {\n      return n.includes(unit);\n    });\n    if (relativeUnits.length) {\n      nProcessed = n;\n    } else {\n      nProcessed = n === '0' ? n : n + 'px';\n    }\n  }\n  return nProcessed;\n};\n\nexport default processedNumber;\n","import { TDirectiveName } from '../config/processors';\nimport buildCss, { IBpCals } from './buildCss';\nimport { IStyles } from './createStyles';\nimport prepareParam from './prepareParam';\nimport processedNumber from './processedNumber';\n\nconst buildAttr = (\n  values: string,\n  directive: TDirectiveName,\n  insertStyles = false\n): IStyles => {\n  const bpCals: IBpCals = {};\n\n  values.split(' ').forEach((param) => {\n    const paramProcessed = prepareParam(param);\n    const bpNames = paramProcessed.breakPoints;\n\n    // processing number values\n    let propValue = paramProcessed.numbers\n      .split('-')\n      .map((n) => processedNumber(n))\n      .join(' ');\n    if (paramProcessed.important) propValue += ' !important';\n    bpCals[bpNames] = {\n      name: param,\n      value: propValue,\n    };\n  });\n\n  // Building the classNames and the styles to use.\n  return buildCss({\n    type: directive,\n    bps: bpCals,\n    deep: insertStyles,\n  });\n};\n\nexport default buildAttr;\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPad = (valPads: string, insertStyles = false) => {\r\n  return buildAttr(valPads, 'pad', insertStyles);\r\n};\r\n\r\nexport default buildPad;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPadTop = (valPadTop: string, insertStyles = false) => {\r\n  return buildAttr(valPadTop, 'padt', insertStyles);\r\n};\r\n\r\nexport default buildPadTop;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPadRight = (valPadRight: string, insertStyles = false) => {\r\n  return buildAttr(valPadRight, 'padr', insertStyles);\r\n};\r\n\r\nexport default buildPadRight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPadBottom = (valPadBottom: string, insertStyles = false) => {\r\n  return buildAttr(valPadBottom, 'padb', insertStyles);\r\n};\r\n\r\nexport default buildPadBottom;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPadLeft = (valPadLeft: string, insertStyles = false) => {\r\n  return buildAttr(valPadLeft, 'padl', insertStyles);\r\n};\r\n\r\nexport default buildPadLeft;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMar = (valMars: string, insertStyles = false) => {\r\n  return buildAttr(valMars, 'mar', insertStyles);\r\n};\r\n\r\nexport default buildMar;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMarTop = (valMarTop: string, insertStyles = false) => {\r\n  return buildAttr(valMarTop, 'mart', insertStyles);\r\n};\r\n\r\nexport default buildMarTop;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMarRight = (valMarRight: string, insertStyles = false) => {\r\n  return buildAttr(valMarRight, 'marr', insertStyles);\r\n};\r\n\r\nexport default buildMarRight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMarBottom = (valMarBottom: string, insertStyles = false) => {\r\n  return buildAttr(valMarBottom, 'marb', insertStyles);\r\n};\r\n\r\nexport default buildMarBottom;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMarLeft = (valMarLeft: string, insertStyles = false) => {\r\n  return buildAttr(valMarLeft, 'marl', insertStyles);\r\n};\r\n\r\nexport default buildMarLeft;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMaxWidth = (valMaxWidth: string, insertStyles = false) => {\r\n  return buildAttr(valMaxWidth, 'mxw', insertStyles);\r\n};\r\n\r\nexport default buildMaxWidth;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMaxHeight = (valMaxHeight: string, insertStyles = false) => {\r\n  return buildAttr(valMaxHeight, 'mxh', insertStyles);\r\n};\r\n\r\nexport default buildMaxHeight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMinWidth = (valMinWidth: string, insertStyles = false) => {\r\n  return buildAttr(valMinWidth, 'miw', insertStyles);\r\n};\r\n\r\nexport default buildMinWidth;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMinHeight = (valMinHeight: string, insertStyles = false) => {\r\n  return buildAttr(valMinHeight, 'mih', insertStyles);\r\n};\r\n\r\nexport default buildMinHeight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildHeight = (valHeight: string, insertStyles = false) => {\r\n  return buildAttr(valHeight, 'hgt', insertStyles);\r\n};\r\n\r\nexport default buildHeight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildWidth = (valWidth: string, insertStyles = false) => {\r\n  return buildAttr(valWidth, 'wdh', insertStyles);\r\n};\r\n\r\nexport default buildWidth;\r\n","export const positionProsAndVals = {\n  st: 'static',\n  ab: 'absolute',\n  fi: 'fixed',\n  re: 'relative',\n  si: 'sticky',\n  in: 'initial',\n  ih: 'inherit',\n};\n","import { positionProsAndVals } from '../config/position';\n\nimport buildCss, { IBpCals } from '../helpers/buildCss';\nimport { IStyles } from '../helpers/createStyles';\nimport prepareParam from '../helpers/prepareParam';\nimport regError from '../helpers/regError';\n\nconst buildPosition = (\n  valPos: string,\n  insertStyles = false\n): IStyles | Error => {\n  const bpCals: IBpCals = {};\n\n  // Getting numbers\n  let err: boolean | Error = false;\n\n  for (const param of valPos.split(' ')) {\n    let propVal;\n    const selectorName = param;\n    const paramPrepared = prepareParam(param);\n    const bpNames = paramPrepared.breakPoints;\n    const nameProp = paramPrepared.numbers as keyof typeof positionProsAndVals;\n\n    if (!positionProsAndVals[nameProp]) {\n      err = regError(\n        'Non-existent Alias',\n        \"Don't exists the alias '\" + nameProp + \"' in Position vault.\"\n      );\n      break;\n    }\n\n    propVal = positionProsAndVals[nameProp];\n    if (paramPrepared.important) propVal += ' !important';\n\n    bpCals[bpNames] = {\n      name: selectorName,\n      value: propVal,\n    };\n  }\n\n  if (err) return err;\n\n  // Building the classNames and the styles to use.\n  return buildCss({\n    type: 'pos',\n    bps: bpCals,\n    deep: insertStyles,\n  });\n};\n\nexport default buildPosition;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildTop = (val: string, insertStyles = false) => {\n  return buildAttr(val, 't', insertStyles);\n};\n\nexport default buildTop;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildRight = (val: string, insertStyles = false) => {\n  return buildAttr(val, 'r', insertStyles);\n};\n\nexport default buildRight;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildBottom = (val: string, insertStyles = false) => {\n  return buildAttr(val, 'b', insertStyles);\n};\n\nexport default buildBottom;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildLeft = (val: string, insertStyles = false) => {\n  return buildAttr(val, 'l', insertStyles);\n};\n\nexport default buildLeft;\n","import buildCols from '../methods/buildCols';\nimport buildFlex from '../methods/buildFlex';\nimport buildPad from '../methods/buildPad';\nimport buildPadTop from '../methods/buildPadTop';\nimport buildPadRight from '../methods/buildPadRight';\nimport buildPadBottom from '../methods/buildPadBottom';\nimport buildPadLeft from '../methods/buildPadLeft';\nimport buildMar from '../methods/buildMar';\nimport buildMarTop from '../methods/buildMarTop';\nimport buildMarRight from '../methods/buildMarRight';\nimport buildMarBottom from '../methods/buildMarBottom';\nimport buildMarLeft from '../methods/buildMarLeft';\nimport buildMaxWidth from '../methods/buildMaxWidth';\nimport buildMaxHeight from '../methods/buildMaxHeight';\nimport buildMinWidth from '../methods/buildMinWidth';\nimport buildMinHeight from '../methods/buildMinHeight';\nimport buildHeight from '../methods/buildHeight';\nimport buildWidth from '../methods/buildWidth';\nimport buildPosition from '../methods/buildPosition';\n\nimport { IStyles } from '../helpers/createStyles';\nimport buildTop from '../methods/buildTop';\nimport buildRight from '../methods/buildRight';\nimport buildBottom from '../methods/buildBottom';\nimport buildLeft from '../methods/buildLeft';\n\nexport type TDirectiveName =\n  | 'cols'\n  | 'pad'\n  | 'padt'\n  | 'padr'\n  | 'padb'\n  | 'padl'\n  | 'mar'\n  | 'mart'\n  | 'marr'\n  | 'marb'\n  | 'marl'\n  | 'flex'\n  | 'mxw'\n  | 'mxh'\n  | 'miw'\n  | 'mih'\n  | 'wdh'\n  | 'hgt'\n  | 'pos'\n  | 't'\n  | 'r'\n  | 'b'\n  | 'l';\n\nexport interface IProcessor {\n  build: (values: string, insertStyles: boolean) => IStyles | Error;\n  ruleCss: string;\n}\n\nexport const processors: Record<TDirectiveName, IProcessor> = {\n  cols: {\n    build: buildCols,\n    ruleCss: 'width',\n  },\n\n  // Paddings\n  pad: {\n    build: buildPad,\n    ruleCss: 'padding',\n  },\n  padt: {\n    build: buildPadTop,\n    ruleCss: 'padding-top',\n  },\n  padr: {\n    build: buildPadRight,\n    ruleCss: 'padding-right',\n  },\n  padb: {\n    build: buildPadBottom,\n    ruleCss: 'padding-bottom',\n  },\n  padl: {\n    build: buildPadLeft,\n    ruleCss: 'padding-left',\n  },\n\n  // Margin\n  mar: {\n    build: buildMar,\n    ruleCss: 'margin',\n  },\n  mart: {\n    build: buildMarTop,\n    ruleCss: 'margin-top',\n  },\n  marr: {\n    build: buildMarRight,\n    ruleCss: 'margin-right',\n  },\n  marb: {\n    build: buildMarBottom,\n    ruleCss: 'margin-bottom',\n  },\n  marl: {\n    build: buildMarLeft,\n    ruleCss: 'margin-left',\n  },\n\n  // Flex Box\n  flex: {\n    build: buildFlex,\n    ruleCss: 'display: flex',\n  },\n\n  // Max & Min Width & Height\n  mxw: {\n    build: buildMaxWidth,\n    ruleCss: 'max-width',\n  },\n\n  mxh: {\n    build: buildMaxHeight,\n    ruleCss: 'max-height',\n  },\n\n  miw: {\n    build: buildMinWidth,\n    ruleCss: 'min-width',\n  },\n\n  mih: {\n    build: buildMinHeight,\n    ruleCss: 'min-height',\n  },\n\n  // Width & Height\n  wdh: {\n    build: buildWidth,\n    ruleCss: 'width',\n  },\n\n  hgt: {\n    build: buildHeight,\n    ruleCss: 'height',\n  },\n\n  // Position\n  pos: {\n    build: buildPosition,\n    ruleCss: 'position',\n  },\n  t: {\n    build: buildTop,\n    ruleCss: 'top',\n  },\n  r: {\n    build: buildRight,\n    ruleCss: 'right',\n  },\n  b: {\n    build: buildBottom,\n    ruleCss: 'bottom',\n  },\n  l: {\n    build: buildLeft,\n    ruleCss: 'left',\n  },\n};\n","import { processors, TDirectiveName } from '../config/processors';\r\n\r\nconst getParameters = (\r\n  Node: HTMLElement | Element\r\n): Partial<Record<TDirectiveName, string>> => {\r\n  const params: Partial<Record<TDirectiveName, string>> = {};\r\n  const attrs = Node.attributes;\r\n  const paramNames = Object.keys(processors);\r\n  Array.prototype.forEach.call(attrs, (attr) => {\r\n    if (paramNames.includes(attr.name)) {\r\n      if (attr.value !== '')\r\n        params[attr.name as TDirectiveName] = attr.value\r\n          .trim()\r\n          .split(' ')\r\n          .filter((item: string) => item)\r\n          .join(' ');\r\n    }\r\n  });\r\n  return params;\r\n};\r\n\r\nexport default getParameters;\r\n","import { processors, TDirectiveName } from '../config/processors';\nimport { IStyles } from '../helpers/createStyles';\n\nexport interface IBuildResult {\n  [prop: string]: IStyles | boolean;\n}\n\nconst build = (\n  obj: Partial<Record<TDirectiveName, string>>,\n  insertStyles = false\n): Partial<IBuildResult> | Error => {\n  const rObj: Partial<IBuildResult> = {};\n  let err: Error | boolean = false;\n  for (const prop in obj) {\n    const propData = processors[prop as TDirectiveName];\n    const objStyles: IStyles | Error = propData.build(\n      obj[prop as TDirectiveName] as string,\n      insertStyles\n    );\n    if (objStyles instanceof Error) {\n      err = objStyles;\n      break;\n    } else {\n      rObj[prop] = objStyles;\n    }\n  }\n\n  if (err) return err;\n  return rObj;\n};\n\nexport default build;\n","import getConfig from '../config/main';\n\nconst addClasses = (\n  Node: HTMLElement | Element,\n  classesNames: string,\n  overwrite?: boolean\n): Promise<void> => {\n  return new Promise((resolve) => {\n    const config = getConfig();\n    const names = classesNames.split(' ');\n    let classesToAdd: string[] = names;\n    if (!overwrite) {\n      classesToAdd = names.filter((name) => !Node.classList.contains(name));\n      if (!classesToAdd.length) {\n        resolve();\n        return;\n      }\n    }\n\n    const obsNode = new config.context.MutationObserver((mutations) => {\n      const target = mutations[0].target;\n      const currentClasses = (target as Element).className.split(' ');\n      const containsAll = names.every((element) =>\n        currentClasses.includes(element)\n      );\n      if (containsAll) {\n        obsNode.disconnect();\n        resolve();\n      }\n    });\n    obsNode.observe(Node, {\n      childList: false,\n      subtree: false,\n      attributes: true,\n      attributeFilter: ['class'],\n      characterData: false,\n    });\n\n    if (overwrite) {\n      Node.className = classesNames;\n    } else {\n      const space = Node.hasAttribute('class') ? ' ' : '';\n      Node.className += space + classesToAdd.join(' ');\n    }\n  });\n};\n\nexport default addClasses;\n","import getConfig from '../config/main';\n\nexport const removeProp = (\n  Node: HTMLElement | Element,\n  propName: string,\n  context: Window & typeof globalThis\n): Promise<void> => {\n  return new Promise((resolve) => {\n    if (!Node.hasAttribute(propName)) {\n      resolve();\n      return;\n    }\n    const obsNode = new context.MutationObserver(() => {\n      obsNode.disconnect();\n      resolve();\n    });\n    obsNode.observe(Node, {\n      childList: false,\n      subtree: false,\n      attributes: true,\n      attributeFilter: [propName],\n      characterData: false,\n    });\n    Node.removeAttribute(propName);\n  });\n};\n\nexport const removeProps = (\n  Node: HTMLElement | Element,\n  propNames: string[],\n  context: Window & typeof globalThis\n): Promise<void> => {\n  return new Promise((resolve) => {\n    const promises = propNames.map((name) => removeProp(Node, name, context));\n    Promise.all(promises).then(() => resolve());\n  });\n};\n\nconst removeAttr = (\n  Node: HTMLElement | Element,\n  propNames: string | string[]\n): Promise<void> => {\n  return new Promise((resolve) => {\n    const config = getConfig();\n    if (Array.isArray(propNames)) {\n      removeProps(Node, propNames, config.context).then(resolve);\n    } else {\n      removeProp(Node, propNames, config.context).then(resolve);\n    }\n  });\n};\n\nexport default removeAttr;\n","import getConfig from '../config/main';\nimport addClasses from '../utils/addClasses';\nimport removeAttr from '../utils/removeAttr';\n\nexport interface IEventReady {\n  node: HTMLElement | Element;\n  directive: string | string[];\n  classes: string;\n  resolve: (value: void | Error | PromiseLike<void | Error>) => void;\n}\n\nconst eventReady = ({ node, directive, classes, resolve }: IEventReady) => {\n  const config = getConfig();\n  removeAttr(node, directive)\n    .then(() => addClasses(node, classes))\n    .then(() => {\n      resolve();\n      const event = new config.context.CustomEvent('layout:ready');\n      node.dispatchEvent(event);\n    });\n};\n\nexport default eventReady;\n","import { IStyles } from '../helpers/createStyles';\nimport regError from '../helpers/regError';\nimport build, { IBuildResult } from './build';\nimport getParameters from './getParameters';\nimport { TDirectiveName } from '../config/processors';\nimport eventReady from '../helpers/eventReady';\n\nconst set = (\n  Node: HTMLElement | Element,\n  parameters?: Partial<Record<TDirectiveName, string>>\n): Promise<void | Error> => {\n  return new Promise((resolve, reject) => {\n    const params = parameters || getParameters(Node);\n    const arrParams = Object.keys(params);\n    if (!arrParams.length) {\n      const err = regError(\n        'Parameter Missing',\n        \"don't exists any parameter to process\",\n        Node\n      );\n      reject(err);\n      return;\n    }\n\n    const toBuild: Partial<Record<TDirectiveName, string>> = {};\n    for (const prop in params) {\n      toBuild[prop as TDirectiveName] = params[prop as TDirectiveName];\n    }\n\n    // creating classes names and inserting that classes to the core\n    const classesObj = build(toBuild as Record<TDirectiveName, string>, true);\n    if (classesObj instanceof Error) {\n      reject(classesObj);\n      return;\n    }\n\n    // adding classes\n    const classes = classesObj as Partial<IBuildResult>;\n    const classesNames = Object.keys(classes)\n      .map((name: string) => Object.keys(classes[name] as IStyles))\n      .flat()\n      .join(' ');\n\n    // removing unnecessary props\n    eventReady({\n      node: Node,\n      directive: arrParams,\n      classes: classesNames,\n      resolve,\n    });\n  });\n};\n\nexport default set;\n","import regError from '../helpers/regError';\nimport buildFlex from './buildFlex';\nimport eventReady from '../helpers/eventReady';\n\nconst setFlex = (\n  Node: HTMLElement | Element,\n  flexValues?: string\n): Promise<void | Error> => {\n  return new Promise((resolve, reject) => {\n    const values = flexValues || Node.getAttribute('flex');\n    if (!values) {\n      const err = regError(\n        'Empty',\n        'The value of the directive \"flex\" is empty',\n        Node\n      );\n      reject(err);\n      return;\n    }\n\n    // Creating, inserting, and adding classNames of rules in Node.\n    const objStyles = buildFlex(values, true);\n    if (objStyles instanceof Error) {\n      reject(objStyles);\n      return;\n    }\n\n    const classesToAdd = Object.keys(objStyles).join(' ');\n\n    // removing prop of Node and adding the corresponding classes\n    eventReady({\n      node: Node,\n      directive: 'flex',\n      classes: classesToAdd,\n      resolve,\n    });\n  });\n};\n\nexport default setFlex;\n","import regError from '../helpers/regError';\nimport buildCols from './buildCols';\nimport eventReady from '../helpers/eventReady';\n\nconst setCols = (\n  Node: HTMLElement | Element,\n  columns?: string\n): Promise<void | Error> => {\n  return new Promise((resolve, reject) => {\n    const values = columns || Node.getAttribute('cols');\n    if (!values) {\n      const err = regError(\n        'Empty',\n        \"The value of the directive 'cols' is empty\",\n        Node\n      );\n      reject(err);\n      return;\n    }\n\n    // Creating, inserting, and adding classNames of rules in Node.\n    const objStyles = buildCols(values, true);\n    if (objStyles instanceof Error) {\n      reject(objStyles);\n      return;\n    }\n    const classesToAdd = Object.keys(objStyles).join(' ');\n\n    // removing prop of Node and adding the corresponding classes\n    eventReady({\n      node: Node,\n      directive: 'cols',\n      classes: classesToAdd,\n      resolve,\n    });\n  });\n};\n\nexport default setCols;\n","import buildAttr from '../helpers/buildAttr';\nimport regError from '../helpers/regError';\nimport { TDirectiveName } from '../config/processors';\nimport eventReady from '../helpers/eventReady';\n\nconst setAttr = (\n  Node: HTMLElement | Element,\n  directive: TDirectiveName,\n  values?: string\n): Promise<void | Error> => {\n  return new Promise((resolve, reject) => {\n    const directiveValues = values || Node.getAttribute(directive);\n    if (!directiveValues) {\n      const err = regError(\n        'Empty',\n        'The value of the directive \"' + directive + '\" is empty',\n        Node\n      );\n      reject(err);\n      return;\n    }\n\n    // Creating, inserting, and adding classNames of rules in Node.\n    const objStyles = buildAttr(directiveValues, directive, true);\n    const classesToAdd = Object.keys(objStyles).join(' ');\n\n    // removing prop of Node and adding the corresponding classes\n    eventReady({\n      node: Node,\n      directive,\n      classes: classesToAdd,\n      resolve,\n    });\n  });\n};\n\nexport default setAttr;\n","import setAttr from './setAttr';\r\n\r\nconst setHeight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'hgt', values);\r\n};\r\n\r\nexport default setHeight;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMarBottom = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'marb', values);\r\n};\r\n\r\nexport default setMarBottom;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMarLeft = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'marl', values);\r\n};\r\n\r\nexport default setMarLeft;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMarRight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'marr', values);\r\n};\r\n\r\nexport default setMarRight;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMar = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mar', values);\r\n};\r\n\r\nexport default setMar;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMarTop = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mart', values);\r\n};\r\n\r\nexport default setMarTop;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMaxWidth = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mxw', values);\r\n};\r\n\r\nexport default setMaxWidth;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMinHeight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mih', values);\r\n};\r\n\r\nexport default setMinHeight;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMinWidth = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'miw', values);\r\n};\r\n\r\nexport default setMinWidth;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPadBottom = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'padb', values);\r\n};\r\n\r\nexport default setPadBottom;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPadLeft = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'padl', values);\r\n};\r\n\r\nexport default setPadLeft;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPadRight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'padr', values);\r\n};\r\n\r\nexport default setPadRight;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPad = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'pad', values);\r\n};\r\n\r\nexport default setPad;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPadTop = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'padt', values);\r\n};\r\n\r\nexport default setPadTop;\r\n","import setAttr from './setAttr';\r\n\r\nconst setWidth = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'wdh', values);\r\n};\r\n\r\nexport default setWidth;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMaxHeight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mxh', values);\r\n};\r\n\r\nexport default setMaxHeight;\r\n","import setAttr from './setAttr';\n\nconst setPosition = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'pos', values);\n};\n\nexport default setPosition;\n","import setAttr from './setAttr';\n\nconst setTop = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 't', values);\n};\n\nexport default setTop;\n","import setAttr from './setAttr';\n\nconst setRight = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'r', values);\n};\n\nexport default setRight;\n","import setAttr from './setAttr';\n\nconst setBottom = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'b', values);\n};\n\nexport default setBottom;\n","import setAttr from './setAttr';\n\nconst setLeft = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'l', values);\n};\n\nexport default setLeft;\n","import { processors } from '../config/processors';\nimport addClasses from '../utils/addClasses';\nimport removeAttr from '../utils/removeAttr';\n\nconst reset = (Node: HTMLElement | Element): Promise<void> => {\n  return new Promise((resolve) => {\n    const layouterClasses = Object.keys(processors);\n    const restClass: string[] = [];\n    Node.className.split(' ').filter((name) => {\n      // the name of a class with minus of 4 letters dont follow the syntax of a class name created by the system, so is a normal class name\n      if (name.length < 4) {\n        restClass.push(name);\n        return false;\n      }\n      const nPrex = name.length >= 5 ? 5 : 4;\n      let prex = name.substring(0, nPrex);\n      const lineIndex = prex.split('').indexOf('-');\n      // if the class name haven't a line can't be a class name created by the system\n      if (lineIndex === -1) {\n        restClass.push(name);\n        return false;\n      }\n      prex = prex.substring(0, lineIndex);\n      // if the extraction of the prefix of the class name follow the name of a directive is a class name created by the system\n      if (layouterClasses.includes(prex)) {\n        return true;\n      } else {\n        // if dont, so is a coincidence, but is not a valid class name created by the system\n        restClass.push(name);\n        return false;\n      }\n    });\n    if (restClass.length) {\n      const classesName = restClass.join(' ');\n      addClasses(Node, classesName, true).then(() => {\n        resolve();\n      });\n    } else {\n      removeAttr(Node, 'class').then(() => {\n        resolve();\n      });\n    }\n  });\n};\n\nexport default reset;\n","import { ILayouter } from './../layouter';\nimport { processors } from '../config/processors';\n\nconst searchAndProcess = (layouter: ILayouter, context: Document | HTMLElement | Element) => {\n  return new Promise((resolve) => {\n    const props = Object.keys(processors);\n    const attrs = props.map((prop) => `[${prop}]`).join(', ');\n    const nodes = context.querySelectorAll(attrs);\n    if (!nodes.length) {\n      resolve(layouter);\n      return;\n    }\n\n    const setNodes = new Set();\n    Array.prototype.forEach.call(nodes, (itemNode) => {\n      setNodes.add(itemNode);\n    });\n    const promises: Promise<void | Error>[] = [];\n    setNodes.forEach((node) => {\n      promises.push(layouter.set(node as Element | HTMLElement));\n    });\n    Promise.all(promises).then(resolve);\n  });\n};\n\nexport default searchAndProcess;\n","import { ILayouter } from './../layouter';\nimport { processors } from '../config/processors';\nimport getConfig from '../config/main';\nimport searchAndProcess from './searchAndProcess';\n\nconst mainObserver = (layouter: ILayouter) => {\n  const config = getConfig();\n  const props = Object.keys(processors);\n  const obsBody = new layouter.context.MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n      if (mutation.type === 'childList') {\n        if (!mutation.addedNodes.length) {\n          continue;\n        }\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof HTMLElement) {\n            const props = layouter.getParameters(node);\n            if (Object.keys(props).length) {\n              layouter.set(node, props);\n            }\n            searchAndProcess(layouter, node)\n          }\n        });\n      } else if (mutation.type === 'attributes') {\n        const node = mutation.target;\n        if (node instanceof HTMLElement) {\n          const props = layouter.getParameters(node);\n          if (Object.keys(props).length) {\n            layouter.set(node, props);\n          }\n        }\n      }\n    }\n  });\n  const observerOptions = {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    attributeFilter: props,\n    characterData: false,\n  };\n  obsBody.observe(config.context.document.body, observerOptions);\n};\n\nexport default mainObserver;\n","import { IConfig, IConfigUser, setConfig, updateConfig } from './config/main';\nimport getParameters from './methods/getParameters';\n\nimport build from './methods/build';\nimport buildCols from './methods/buildCols';\nimport buildFlex from './methods/buildFlex';\nimport buildPad from './methods/buildPad';\nimport buildPadTop from './methods/buildPadTop';\nimport buildPadRight from './methods/buildPadRight';\nimport buildPadBottom from './methods/buildPadBottom';\nimport buildPadLeft from './methods/buildPadLeft';\nimport buildMar from './methods/buildMar';\nimport buildMarTop from './methods/buildMarTop';\nimport buildMarRight from './methods/buildMarRight';\nimport buildMarBottom from './methods/buildMarBottom';\nimport buildMarLeft from './methods/buildMarLeft';\nimport buildMaxWidth from './methods/buildMaxWidth';\nimport buildMaxHeight from './methods/buildMaxHeight';\nimport buildMinWidth from './methods/buildMinWidth';\nimport buildMinHeight from './methods/buildMinHeight';\nimport buildHeight from './methods/buildHeight';\nimport buildWidth from './methods/buildWidth';\nimport buildPosition from './methods/buildPosition';\nimport buildTop from './methods/buildTop';\nimport buildRight from './methods/buildRight';\nimport buildBottom from './methods/buildBottom';\nimport buildLeft from './methods/buildLeft';\n\nimport set from './methods/set';\nimport setFlex from './methods/setFlex';\nimport setCols from './methods/SetCols';\nimport setHeight from './methods/setHeight';\nimport setMarBottom from './methods/setMarBottom';\nimport setMarLeft from './methods/setMarLeft';\nimport setMarRight from './methods/setMarRight';\nimport setMar from './methods/setMar';\nimport setMarTop from './methods/setMarTop';\nimport setMaxWidth from './methods/setMaxWidth';\nimport setMinHeight from './methods/setMinHeight';\nimport setMinWidth from './methods/setMinWidth';\nimport setPadBottom from './methods/setPadBottom';\nimport setPadLeft from './methods/setPadLeft';\nimport setPadRight from './methods/setPadRight';\nimport setPad from './methods/setPad';\nimport setPadTop from './methods/setPadTop';\nimport setWidth from './methods/setWidth';\nimport setMaxHeight from './methods/setMaxHeight';\nimport setPosition from './methods/setPosition';\nimport setTop from './methods/setTop';\nimport setRight from './methods/setRight';\nimport setBottom from './methods/setBottom';\nimport setLeft from './methods/setLeft';\n\nimport insertRules from './methods/insertRules';\nimport reset from './methods/reset';\n\nimport { IStyles } from './helpers/createStyles';\nimport { IBuildResult } from './methods/build';\nimport searchAndProcess from './helpers/searchAndProcess';\nimport mainObserver from './helpers/mainObserver';\nimport { TDirectiveName } from './config/processors';\n\nexport interface ILayouter extends IConfig {\n  getParameters: (\n    Node: HTMLElement | Element\n  ) => Partial<Record<TDirectiveName, string>>;\n  updateConfig: (userConfig: Partial<Omit<IConfigUser, 'bridge'>>) => IConfig;\n  build: (\n    obj: Partial<Record<TDirectiveName, string>>,\n    insertStyles?: boolean\n  ) => Partial<IBuildResult> | Error;\n  buildCols: (valCols: string, insertStyles?: boolean) => IStyles | Error;\n  buildFlex: (valFlex: string, insertStyles?: boolean) => IStyles | Error;\n  buildPad: (valPads: string, insertStyles?: boolean) => IStyles;\n  buildPadTop: (valPadTop: string, insertStyles?: boolean) => IStyles;\n  buildPadRight: (valPadRight: string, insertStyles?: boolean) => IStyles;\n  buildPadBottom: (valPadBottom: string, insertStyles?: boolean) => IStyles;\n  buildPadLeft: (valPadLeft: string, insertStyles?: boolean) => IStyles;\n  buildMar: (valMars: string, insertStyles?: boolean) => IStyles;\n  buildMarTop: (valMarTop: string, insertStyles?: boolean) => IStyles;\n  buildMarRight: (valMarRight: string, insertStyles?: boolean) => IStyles;\n  buildMarBottom: (valMarBottom: string, insertStyles?: boolean) => IStyles;\n  buildMarLeft: (valMarLeft: string, insertStyles?: boolean) => IStyles;\n  buildMaxWidth: (valMaxWidth: string, insertStyles?: boolean) => IStyles;\n  buildMaxHeight: (valMaxHeight: string, insertStyles?: boolean) => IStyles;\n  buildMinWidth: (valMinWidth: string, insertStyles?: boolean) => IStyles;\n  buildMinHeight: (valMinHeight: string, insertStyles?: boolean) => IStyles;\n  buildHeight: (valHeight: string, insertStyles?: boolean) => IStyles;\n  buildWidth: (valWidth: string, insertStyles?: boolean) => IStyles;\n  buildPosition: (\n    valPosition: string,\n    insertStyles?: boolean\n  ) => IStyles | Error;\n  buildTop: (valTop: string, insertStyles?: boolean) => IStyles | Error;\n  buildRight: (valRight: string, insertStyles?: boolean) => IStyles | Error;\n  buildBottom: (valBottom: string, insertStyles?: boolean) => IStyles | Error;\n  buildLeft: (valLeft: string, insertStyles?: boolean) => IStyles | Error;\n\n  set: (\n    Node: HTMLElement | Element,\n    parameters?: Partial<Record<TDirectiveName, string>>\n  ) => Promise<void | Error>;\n  setCols: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setFlex: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMar: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarTop: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarRight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarBottom: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarLeft: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPad: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadTop: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadRight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadBottom: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadLeft: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMinWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMaxWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMinHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMaxHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPosition: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n\n  setTop: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setRight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setBottom: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setLeft: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n\n  insertRules: (objStyles: IStyles) => void;\n  reset: (Node: HTMLElement | Element) => Promise<void>;\n  version: string;\n}\n\ndeclare global {\n  interface Window {\n    layouter: ILayouter;\n  }\n}\n\nconst layouter = (\n  context: Window & typeof globalThis,\n  userConfig: Partial<IConfigUser> = {}\n): ILayouter => {\n  const config = setConfig(context, userConfig);\n\n  const instance = {\n    ...config,\n    getParameters,\n    updateConfig,\n    insertRules,\n    build,\n    buildCols,\n    buildFlex,\n    buildPad,\n    buildPadTop,\n    buildPadRight,\n    buildPadBottom,\n    buildPadLeft,\n    buildMar,\n    buildMarTop,\n    buildMarRight,\n    buildMarBottom,\n    buildMarLeft,\n    buildMaxWidth,\n    buildMaxHeight,\n    buildMinWidth,\n    buildMinHeight,\n    buildHeight,\n    buildWidth,\n    set,\n    setCols,\n    setFlex,\n    setMar,\n    setMarTop,\n    setMarRight,\n    setMarBottom,\n    setMarLeft,\n    setPad,\n    setPadTop,\n    setPadRight,\n    setPadBottom,\n    setPadLeft,\n    setWidth,\n    setMinWidth,\n    setMaxWidth,\n    setHeight,\n    setMinHeight,\n    setMaxHeight,\n    reset,\n    buildPosition,\n    buildTop,\n    buildRight,\n    buildBottom,\n    buildLeft,\n    setPosition,\n    setTop,\n    setRight,\n    setBottom,\n    setLeft,\n  };\n\n  // Auto init process\n  searchAndProcess(instance, context.document).then(() => {\n    if (instance.ready) instance.ready(instance);\n    mainObserver(instance);\n  });\n\n  return instance;\n};\n\nif (typeof window !== 'undefined' && typeof exports === 'undefined') {\n  window.layouter = layouter(window);\n}\n\nexport default layouter;\n"],"names":["config"],"mappings":"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"}