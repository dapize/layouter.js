{"version":3,"file":"layouter.es.js","sources":["../src/helpers/breakpointsNums.ts","../src/helpers/createScopeStyles.ts","../src/helpers/scopesStylesBuilder.ts","../src/helpers/breakpointsOrdered.ts","../src/config/main.ts","../src/config/processors.ts","../src/methods/getParameters.ts","../src/helpers/prepareParam.ts","../src/helpers/regError.ts","../src/helpers/calPercentage.ts","../src/helpers/getScopeByclassName.ts","../src/methods/insertRules.ts","../src/config/flex.ts","../src/helpers/percentageConverter.ts","../src/helpers/createStyles.ts","../src/helpers/nameCleaner.ts","../src/helpers/buildCss.ts","../src/methods/buildCols.ts","../src/methods/buildFlex.ts","../src/helpers/processedNumber.ts","../src/helpers/buildAttr.ts","../src/methods/buildPad.ts","../src/methods/buildPadTop.ts","../src/methods/buildPadRight.ts","../src/methods/buildPadBottom.ts","../src/methods/buildPadLeft.ts","../src/methods/buildMar.ts","../src/methods/buildMarTop.ts","../src/methods/buildMarRight.ts","../src/methods/buildMarBottom.ts","../src/methods/buildMarLeft.ts","../src/methods/buildMaxWidth.ts","../src/methods/buildMaxHeight.ts","../src/methods/buildMinWidth.ts","../src/methods/buildMinHeight.ts","../src/methods/buildHeight.ts","../src/methods/buildWidth.ts","../src/methods/build.ts","../src/utils/addClasses.ts","../src/utils/removeAttr.ts","../src/methods/set.ts","../src/methods/setFlex.ts","../src/methods/SetCols.ts","../src/methods/setAttr.ts","../src/methods/setHeight.ts","../src/methods/setMarBottom.ts","../src/methods/setMarLeft.ts","../src/methods/setMarRight.ts","../src/methods/setMar.ts","../src/methods/setMarTop.ts","../src/methods/setMaxWidth.ts","../src/methods/setMinHeight.ts","../src/methods/setMinWidth.ts","../src/methods/setPadBottom.ts","../src/methods/setPadLeft.ts","../src/methods/setPadRight.ts","../src/methods/setPad.ts","../src/methods/setPadTop.ts","../src/methods/setWidth.ts","../src/methods/setMaxHeight.ts","../src/methods/reset.ts","../src/helpers/initAutoProcessor.ts","../src/helpers/mainObserver.ts","../src/layouter.ts"],"sourcesContent":["export type TNumProp = 'width' | 'cols';\n\nexport interface IBreakpoint {\n  alias: string;\n  width: number;\n}\n\nexport interface IBreakpoints {\n  [alias: string]: {\n    width: number;\n    cols: number;\n  };\n}\n\nexport interface IBreakpointObj {\n  [alias: string]: number;\n}\n\nconst breakpointsNums = (\n  objBps: IBreakpoints,\n  propName: TNumProp\n): IBreakpointObj => {\n  const sizes: IBreakpointObj = {};\n\n  if (propName === 'width') {\n    Object.keys(objBps)\n      .map((bp: string) => {\n        return {\n          alias: bp,\n          width: objBps[bp].width,\n        };\n      })\n      .sort((a: IBreakpoint, b: IBreakpoint) =>\n        a.width > b.width ? 1 : b.width > a.width ? -1 : 0\n      )\n      .forEach((bp: IBreakpoint, index: number) => {\n        sizes[bp.alias] = !index ? 0 : objBps[bp.alias][propName];\n      });\n  } else {\n    Object.keys(objBps).forEach((bp) => {\n      sizes[bp] = objBps[bp][propName];\n    });\n  }\n\n  return sizes;\n};\n\nexport default breakpointsNums;\n","export type TInsertion = 'before' | 'after' | 'append';\n\nexport interface ICreateScopeStyles {\n  bridge?: boolean;\n  bp: string;\n  insertionType: TInsertion;\n  node: HTMLElement;\n}\n\nexport interface IRCreateScopeStyles {\n  method:\n    | CSSStyleSheet\n    | {\n        insertRule: (ruleCss: string) => void;\n        rules: string[];\n      };\n  node: HTMLElement;\n}\n\nconst createScopeStyles = ({\n  bridge: withBridge,\n  bp,\n  insertionType,\n  node,\n}: ICreateScopeStyles): IRCreateScopeStyles => {\n  let stylesScope = document.getElementById('layouter-' + bp);\n  if (!stylesScope) {\n    stylesScope = document.createElement('style');\n    stylesScope.appendChild(document.createTextNode('')); // WebKit hack :(\n    const nodeParent = node.parentNode as HTMLDivElement;\n    switch (insertionType) {\n      case 'before':\n        nodeParent.insertBefore(stylesScope, node);\n        break;\n      case 'after':\n        node.nextSibling\n          ? nodeParent.insertBefore(stylesScope, node.nextSibling)\n          : nodeParent.appendChild(stylesScope);\n        break;\n      case 'append':\n        node.appendChild(stylesScope);\n        break;\n    }\n    stylesScope.id = 'layouter-' + bp;\n  }\n\n  let bridge: IRCreateScopeStyles;\n  if (withBridge) {\n    bridge = {\n      method: (stylesScope as HTMLStyleElement).sheet as CSSStyleSheet,\n      node: stylesScope,\n    };\n  } else {\n    bridge = {\n      method: {\n        insertRule: (ruleCss: string) => {\n          (stylesScope as HTMLDivElement).appendChild(\n            document.createTextNode(ruleCss)\n          );\n        },\n        rules: [],\n      },\n      node: stylesScope,\n    };\n  }\n  return bridge;\n};\n\nexport default createScopeStyles;\n","import { IBreakpoints } from './breakpointsNums';\nimport createScopeStyles, { IRCreateScopeStyles } from './createScopeStyles';\n\nexport interface IScopes {\n  [name: string]: IRCreateScopeStyles;\n}\n\nexport const scopesStylesBuilder = (\n  breakpoints: IBreakpoints,\n  bridge: boolean,\n  scope?: IScopes\n): IScopes => {\n  const scopes: IScopes = scope || {};\n  Object.keys(breakpoints).forEach((bp: string) => {\n    if (!scopes[bp]) {\n      scopes[bp] = createScopeStyles({\n        bridge,\n        bp,\n        insertionType: 'append',\n        node: document.body,\n      });\n    }\n  });\n  return scopes;\n};\n","import { ICols } from '../config/main';\nimport { IBreakpoints } from './breakpointsNums';\n\nconst breakpointsOrdered = (bps: IBreakpoints, sizes: ICols) => {\n  const bpsOrdered: IBreakpoints = {};\n  Object.keys(sizes).forEach((bpName) => (bpsOrdered[bpName] = bps[bpName]));\n  return bpsOrdered;\n};\n\nexport default breakpointsOrdered;\n","import { ILayouter } from './../layouter';\nimport breakpointsNums, { IBreakpoints } from '../helpers/breakpointsNums';\nimport { IScopes, scopesStylesBuilder } from '../helpers/scopesStylesBuilder';\nimport breakpointsOrdered from '../helpers/breakpointsOrdered';\nimport { version } from '../../package.json';\n\nexport interface ICols {\n  [colAlias: string]: number;\n}\n\nexport interface IConfigUser {\n  prefix: string;\n  breakpoints: IBreakpoints;\n  bridge: boolean;\n  debug?: boolean;\n  ready?: (instance: ILayouter) => void;\n}\n\ninterface IConfigNums {\n  scope: IScopes;\n  cols: ICols;\n  sizes: ICols;\n  breakpoints: IBreakpoints;\n}\n\nexport interface IConfig extends Omit<IConfigUser, 'breakpoints'>, IConfigNums {\n  styles: {\n    [className: string]: string;\n  };\n  version: string;\n}\n\ndeclare global {\n  interface Window {\n    layouterConfig: Partial<IConfigUser>;\n  }\n}\n\nconst breakpointsInit: IBreakpoints = {\n  xs: {\n    width: 360,\n    cols: 15,\n  },\n  sm: {\n    width: 600,\n    cols: 25,\n  },\n  md: {\n    width: 900,\n    cols: 31,\n  },\n  lg: {\n    width: 1200,\n    cols: 41,\n  },\n  xlg: {\n    width: 1536,\n    cols: 51,\n  },\n};\n\nexport let baseConfig: IConfigUser = {\n  prefix: '',\n  breakpoints: breakpointsInit,\n  bridge: true,\n  debug: true,\n};\n\nlet config: IConfig;\n\nconst configNums = (\n  bps: IBreakpoints,\n  bridge: boolean,\n  scope?: IScopes\n): IConfigNums => {\n  const sizes = breakpointsNums(bps, 'width');\n  const finalBps = breakpointsOrdered(bps, sizes);\n  return {\n    sizes,\n    cols: breakpointsNums(bps, 'cols'),\n    scope: scopesStylesBuilder(finalBps, bridge, scope),\n    breakpoints: finalBps,\n  };\n};\n\nexport const setConfig = (customCfg: Partial<IConfigUser> = {}): IConfig => {\n  if (window && window.layouterConfig) {\n    baseConfig = {\n      ...baseConfig,\n      ...window.layouterConfig,\n      ...customCfg,\n    };\n  } else {\n    if (customCfg) {\n      baseConfig = {\n        ...baseConfig,\n        ...customCfg,\n      };\n    }\n  }\n\n  config = {\n    ...baseConfig,\n    ...configNums(baseConfig.breakpoints, baseConfig.bridge),\n    styles: {},\n    version,\n  };\n\n  return config;\n};\n\nexport const setStyles = (className: string, value: string) => {\n  config.styles[className] = value;\n};\n\nconst getConfig = (reset = false): IConfig => {\n  return reset ? setConfig() : config;\n};\n\nexport const updateConfig = (userConfig: Partial<IConfigUser>): IConfig => {\n  config = {\n    ...config,\n    ...userConfig,\n  };\n\n  if (userConfig.breakpoints) {\n    config = {\n      ...config,\n      ...configNums(config.breakpoints, config.bridge, config.scope),\n    };\n  }\n\n  return config;\n};\n\nexport default getConfig;\n","export type TDirectiveName =\n  | 'cols'\n  | 'pad'\n  | 'padt'\n  | 'padr'\n  | 'padb'\n  | 'padl'\n  | 'mar'\n  | 'mart'\n  | 'marr'\n  | 'marb'\n  | 'marl'\n  | 'flex'\n  | 'mxw'\n  | 'mxh'\n  | 'miw'\n  | 'mih'\n  | 'wdh'\n  | 'hgt';\n\nexport interface IProcessor {\n  set: string;\n  build: string;\n  ruleCss: string;\n}\n\nexport const processors: Record<TDirectiveName, IProcessor> = {\n  cols: {\n    set: 'setCols',\n    build: 'buildCols',\n    ruleCss: 'width',\n  },\n\n  // Paddings\n  pad: {\n    set: 'setPad',\n    build: 'buildPad',\n    ruleCss: 'padding',\n  },\n  padt: {\n    set: 'setPadTop',\n    build: 'buildPadTop',\n    ruleCss: 'padding-top',\n  },\n  padr: {\n    set: 'setPadRight',\n    build: 'buildPadRight',\n    ruleCss: 'padding-right',\n  },\n  padb: {\n    set: 'setPadBottom',\n    build: 'buildPadBottom',\n    ruleCss: 'padding-bottom',\n  },\n  padl: {\n    set: 'setPadLeft',\n    build: 'buildPadLeft',\n    ruleCss: 'padding-left',\n  },\n\n  // Margin\n  mar: {\n    set: 'setMar',\n    build: 'buildMar',\n    ruleCss: 'margin',\n  },\n  mart: {\n    set: 'setMarTop',\n    build: 'buildMarTop',\n    ruleCss: 'margin-top',\n  },\n  marr: {\n    set: 'setMarRight',\n    build: 'buildMarRight',\n    ruleCss: 'margin-right',\n  },\n  marb: {\n    set: 'setMarBottom',\n    build: 'buildMarBottom',\n    ruleCss: 'margin-bottom',\n  },\n  marl: {\n    set: 'setMarLeft',\n    build: 'buildMarLeft',\n    ruleCss: 'margin-left',\n  },\n\n  // Flex Box\n  flex: {\n    set: 'setFlex',\n    build: 'buildFlex',\n    ruleCss: 'display: flex',\n  },\n\n  // Max & Min Width & Height\n  mxw: {\n    set: 'setMaxWidth',\n    build: 'buildMaxWidth',\n    ruleCss: 'max-width',\n  },\n\n  mxh: {\n    set: 'setMaxHeight',\n    build: 'buildMaxHeight',\n    ruleCss: 'max-height',\n  },\n\n  miw: {\n    set: 'setMinWidth',\n    build: 'buildMinWidth',\n    ruleCss: 'min-width',\n  },\n\n  mih: {\n    set: 'setMinHeight',\n    build: 'buildMinHeight',\n    ruleCss: 'min-height',\n  },\n\n  // Width & Height\n  wdh: {\n    set: 'setWidth',\n    build: 'buildWidth',\n    ruleCss: 'width',\n  },\n\n  hgt: {\n    set: 'setHeight',\n    build: 'buildHeight',\n    ruleCss: 'height',\n  },\n};\n","import { processors, TDirectiveName } from '../config/processors';\n\nconst getParameters = (\n  Node: HTMLElement | Element\n): Partial<Record<TDirectiveName, string>> => {\n  const params: Partial<Record<TDirectiveName, string>> = {};\n  const attrs = Node.attributes;\n  const paramNames = Object.keys(processors);\n  Array.prototype.forEach.call(attrs, (attr) => {\n    if (paramNames.includes(attr.name)) {\n      if (attr.value !== '')\n        params[attr.name as TDirectiveName] = attr.value\n          .trim()\n          .split(' ')\n          .filter((item: string) => item)\n          .join(' ');\n    }\n  });\n  return params;\n};\n\nexport default getParameters;\n","import getConfig from '../config/main';\n\nexport interface IPrepareParamObj {\n  widthBp: boolean;\n  numbers: string;\n  breakPoints: string;\n  important: boolean;\n}\n\nconst prepareParam = (param: string): IPrepareParamObj => {\n  let bp: string;\n  let argParam = param;\n  let important = false;\n  const haveBp = argParam.includes('@');\n  if (haveBp) {\n    const bpSplited = argParam.split('@');\n    argParam = bpSplited[0];\n    bp = bpSplited[1];\n  } else {\n    const config = getConfig();\n    bp = Object.keys(config.breakpoints)[0];\n  }\n\n  if (param.includes('!')) {\n    important = true;\n    bp = bp.replace(/!/g, '');\n    argParam = argParam.replace(/!/g, '');\n  }\n\n  return {\n    widthBp: haveBp,\n    numbers: argParam,\n    breakPoints: bp,\n    important,\n  };\n};\n\nexport default prepareParam;\n","import config from '../config/main';\n\nconst regError = (\n  name: string,\n  message: string,\n  Node?: Element | HTMLElement\n): Error => {\n  const err = new Error();\n  err.name = name;\n  err.message = message;\n  const intConfig = config();\n  if (intConfig.debug) {\n    console.error(err);\n    if (Node) console.log(Node);\n  }\n  return err;\n};\n\nexport default regError;\n","const calPercentage = (n1: number, n2: number): string => {\n  const cal = (n1 * 100) / n2;\n  const haveDecimal = cal - Math.floor(cal) !== 0;\n  const result = haveDecimal ? cal.toFixed(3) : cal;\n  return result + '%';\n};\n\nexport default calPercentage;\n","import config from '../config/main';\nimport createScopeStyles, { IRCreateScopeStyles } from './createScopeStyles';\n\nconst getScopeByclassName = (className: string): IRCreateScopeStyles => {\n  const nameClass = className.replace(/!/g, '');\n  const atIndex = nameClass.indexOf('@');\n  const intConfig = config();\n  const scope = intConfig.scope;\n  const bridge = intConfig.bridge;\n\n  // Haven´t a BP designed\n  if (atIndex === -1) {\n    const firstBp = Object.keys(intConfig.breakpoints)[0];\n    return scope[firstBp as string];\n  }\n\n  // Have a BP designed, a normal BP.\n  const bp = nameClass.substring(atIndex + 1);\n  if (!bp.includes('-')) return scope[bp]; // A simple BP (13/15@lg), not compound (like this: 13/15@sm-md).\n\n  // A BP until. Example 13/15@-md\n  if (bp.substring(0, 1) === '-') {\n    if (scope[bp]) return scope[bp]; // exists the Scope.\n    const bpUntil = bp.substring(1);\n    scope[bp] = createScopeStyles({\n      bridge: bridge,\n      bp,\n      insertionType: 'before',\n      node: scope[bpUntil].node,\n    });\n    return scope[bp]; // returning a new scope created\n  }\n\n  // A BP from and until (a BP compound). Example: Example 13/15@sm-md\n  if (scope[bp]) {\n    return scope[bp]; // exists the Scope.\n  }\n\n  const fromBp = bp.split('-')[0];\n  scope[bp] = createScopeStyles({\n    bridge: bridge,\n    bp,\n    insertionType: 'after',\n    node: scope[fromBp].node,\n  });\n\n  return scope[bp]; // returning a new scope compounded created\n};\n\nexport default getScopeByclassName;\n","import config, { setStyles } from '../config/main';\nimport { IStyles } from '../helpers/createStyles';\nimport getScopeByclassName from '../helpers/getScopeByclassName';\n\nconst insertRules = (objStyles: IStyles) => {\n  const intConfig = config();\n\n  for (const className in objStyles) {\n    if (!intConfig.styles[className]) {\n      const nodeScope = getScopeByclassName(className);\n      const valClass = objStyles[className];\n      const rules = nodeScope.method.rules;\n      nodeScope.method.insertRule(valClass, rules ? rules.length : 0);\n      setStyles(className, valClass); // saving in styles vault\n    }\n  }\n};\n\nexport default insertRules;\n","export const flexProsAndVals = {\n  jc: 'justify-content',\n  ai: 'align-items',\n  ce: 'center',\n  fs: 'flex-start',\n  fe: 'flex-end',\n  sb: 'space-between',\n  sa: 'space-around',\n  fw: 'flex-wrap',\n  nw: 'nowrap',\n  w: 'wrap',\n  wr: 'wrap-reverse',\n  fd: 'flex-direction',\n  r: 'row',\n  rr: 'row-reverse',\n  co: 'column',\n  cor: 'column-reverse',\n  fg: 'flex-grow',\n  fh: 'flex-shrink',\n  as: 'align-self',\n  or: 'order',\n  au: 'auto',\n  st: 'stretch',\n  bl: 'baseline',\n  in: 'initial',\n  ih: 'inherit',\n};\n\nexport const flexAttrsSelf = ['fg', 'fh', 'or'];\n","const percentageConverter = (percentage: string) => {\n  return '0¯' + percentage.replace('%', '');\n};\n\nexport default percentageConverter;\n","import { flexAttrsSelf } from '../config/flex';\nimport config from '../config/main';\nimport { processors, TDirectiveName } from '../config/processors';\nimport { IBpCals } from './buildCss';\nimport percentageConverter from './percentageConverter';\n\nexport interface IStyles {\n  [name: string]: string;\n}\n\nconst createStyles = (directive: TDirectiveName, bps: IBpCals): IStyles => {\n  const intConfig = config();\n  const sizes = intConfig.sizes;\n  const prefix = intConfig.prefix;\n  const prop = processors[directive].ruleCss;\n  const styles: IStyles = {};\n\n  Object.keys(bps).forEach((bp) => {\n    // preparing the className\n    const shortNameClass = bps[bp].name;\n\n    // just if have a percentage\n    let nameClass = shortNameClass;\n    if (shortNameClass.includes('%')) {\n      nameClass = shortNameClass.replace(\n        shortNameClass,\n        percentageConverter(shortNameClass)\n      );\n    }\n\n    const finalPrefix = prefix ? prefix + '-' : '';\n    nameClass =\n      finalPrefix +\n      directive +\n      '-' +\n      nameClass\n        .replace(/\\//g, '\\\\/')\n        .replace(/:/g, '\\\\:')\n        .replace('@', '\\\\@')\n        .split('.')\n        .join('_');\n\n    // Property and value\n    let propAndVal;\n    if (directive === 'flex') {\n      propAndVal = bps[bp].value;\n      const flexImportant = shortNameClass.includes('!')\n        ? ';display:flex !important;'\n        : ';display:flex;';\n\n      // Searching a flex self inside. ['as' for 'align-self']\n      const attrsFlexSelfs = ['as']\n        .concat(flexAttrsSelf)\n        .filter((nameAttrFlex) => shortNameClass.includes(nameAttrFlex + ':'));\n      if (attrsFlexSelfs.length) {\n        // if the items number of flex selft (+1) is diferrent so exists other flex attribute. Example: as:ce jc:ce\n        if (attrsFlexSelfs.length + 1 !== shortNameClass.split(':').length) {\n          propAndVal += flexImportant;\n        }\n      } else {\n        propAndVal += flexImportant;\n      }\n    } else {\n      propAndVal = prop + ':' + bps[bp].value;\n    }\n\n    let rule = '@media screen and ';\n    let direct = false;\n    if (!bp.includes('-')) {\n      // no tiene until\n      if (sizes[bp]) {\n        rule += '(min-width: ' + sizes[bp] + 'px)';\n      } else {\n        rule = '.' + nameClass.replace(/!/g, '\\\\!') + '{' + propAndVal + '}';\n        direct = true;\n      }\n    } else {\n      const bpSplited = bp.split('-');\n      const bp1 = bpSplited[0];\n      if (bp1) rule += '(min-width: ' + sizes[bp1] + 'px) and ';\n      const bp2 = bpSplited[1];\n      rule += '(max-width: ' + (sizes[bp2] - 1) + 'px)';\n    }\n\n    if (!direct) {\n      rule += '{.' + nameClass.replace(/!/g, '\\\\!') + '{' + propAndVal + '}}';\n    }\n    styles[nameClass] = rule;\n  });\n  return styles;\n};\n\nexport default createStyles;\n","import { IStyles } from './createStyles';\n\nconst replaceList = [\n  ['/', ''],\n  ['\\\\', '/'],\n  ['/:', ':'],\n  ['\\\\:', ':'],\n  ['\\\\@', '@'],\n  ['/@', '@'],\n];\n\nconst nameCleaner = (objStyles: IStyles) => {\n  const obj: IStyles = {};\n  for (const name in objStyles) {\n    let newName = name;\n    replaceList.forEach((reItem) => {\n      newName = newName.split(reItem[0]).join(reItem[1]);\n    });\n    obj[newName] = objStyles[name];\n  }\n  return obj;\n};\n\nexport default nameCleaner;\n","import { TDirectiveName } from '../config/processors';\nimport insertRules from '../methods/insertRules';\nimport createStyles, { IStyles } from './createStyles';\nimport nameCleaner from './nameCleaner';\n\nexport interface IRBuildStyles {\n  name: string;\n  value: string;\n}\n\nexport interface IBpCals {\n  [bpName: string]: IRBuildStyles;\n}\n\nexport interface IBuildCss {\n  type: TDirectiveName;\n  bps: IBpCals;\n  deep: boolean;\n}\n\nconst buildCss = (data: IBuildCss): IStyles => {\n  // creating the styles\n  const objStyles = createStyles(data.type, data.bps);\n\n  // Inserting CSS rules\n  if (data.deep) {\n    insertRules(objStyles);\n  }\n\n  // name classes cleaner\n  return nameCleaner(objStyles);\n};\n\nexport default buildCss;\n","import prepareParam from '../helpers/prepareParam';\nimport regError from '../helpers/regError';\nimport calPercentage from '../helpers/calPercentage';\n\nimport buildCss, { IBpCals } from '../helpers/buildCss';\nimport getConfig from '../config/main';\nimport { IStyles } from '../helpers/createStyles';\n\nconst buildCols = (values: string, insertStyles = false): IStyles | Error => {\n  let cols: number[];\n  let bp;\n  const bpCals: IBpCals = {};\n  const config = getConfig();\n\n  // Getting numbers\n  let selectorName, propValue, paramPrepared;\n  const directBp = Object.keys(config.breakpoints)[0];\n\n  let err: boolean | Error = false;\n\n  for (const item of values.split(' ')) {\n    let param = item;\n    selectorName = param;\n    paramPrepared = prepareParam(param);\n    bp = paramPrepared.breakPoints;\n    param = paramPrepared.numbers;\n\n    if (param.includes('/')) {\n      const paramSplited = param.split('/');\n      cols = [Number(paramSplited[0]), Number(paramSplited[1])];\n    } else {\n      if (paramPrepared.widthBp) {\n        if (bp.includes('-')) {\n          err = regError(\n            'SyntaxError',\n            \"You can't determine a 'until breakpoint' when use the explicit columns max: \" +\n              values\n          );\n          break;\n        } else {\n          cols = [Number(param), config.cols[bp] as number];\n        }\n      } else {\n        cols = [Number(param), config.cols[directBp] as number];\n      }\n    }\n\n    propValue = calPercentage(cols[0], cols[1]);\n    if (paramPrepared.important) propValue += ' !important';\n\n    bpCals[bp] = {\n      name: selectorName,\n      value: propValue,\n    };\n  }\n\n  if (err) return err;\n\n  // Building the classNames and the styles to use.\n  return buildCss({\n    type: 'cols',\n    bps: bpCals,\n    deep: insertStyles,\n  });\n};\n\nexport default buildCols;\n","import { flexAttrsSelf, flexProsAndVals } from '../config/flex';\nimport getConfig from '../config/main';\n\nimport buildCss, { IBpCals } from '../helpers/buildCss';\nimport { IStyles } from '../helpers/createStyles';\nimport prepareParam from '../helpers/prepareParam';\nimport regError from '../helpers/regError';\n\nconst buildFlex = (valFlex: string, insertStyles = false): IStyles | Error => {\n  const bpCals: IBpCals = {};\n\n  // Getting numbers\n  let err: boolean | Error = false;\n  const config = getConfig();\n  const firstBp = Object.keys(config.breakpoints)[0];\n\n  for (const param of valFlex.split(' ')) {\n    let propVal;\n    let selectorName = param;\n    const paramPrepared = prepareParam(param);\n    const bpNames = paramPrepared.breakPoints;\n    const flexSplited = paramPrepared.numbers.split(':');\n    const nameProp = flexSplited[0] as keyof typeof flexProsAndVals; // 'fc' o 'or'\n    const valProp = flexSplited[1] as keyof typeof flexProsAndVals; // 'ce' o '1'\n\n    if (!flexAttrsSelf.includes(nameProp)) {\n      if (!flexProsAndVals[nameProp]) {\n        err = regError(\n          'Non-existent Alias',\n          \"Don't exists the alias '\" + nameProp + \"' in Flex vault.\"\n        );\n        break;\n      }\n      if (!flexProsAndVals[valProp]) {\n        err = regError(\n          'Non-existent Alias',\n          \"Don't exists the alias '\" + valProp + \"' in Flex vault.\"\n        );\n        break;\n      }\n      propVal = flexProsAndVals[nameProp] + ':' + flexProsAndVals[valProp];\n    } else {\n      propVal = flexProsAndVals[nameProp] + ':' + valProp;\n    }\n\n    if (paramPrepared.important) propVal += ' !important';\n\n    if (!bpCals[bpNames]) {\n      bpCals[bpNames] = {\n        name: selectorName,\n        value: propVal,\n      };\n    } else {\n      if (selectorName.includes('@')) selectorName = selectorName.split('@')[0];\n      const sufixBp = bpNames === firstBp ? '' : '@' + bpNames;\n      bpCals[bpNames].name =\n        bpCals[bpNames].name.split('@')[0] + '-' + selectorName + sufixBp;\n      bpCals[bpNames].value += ';' + propVal;\n    }\n  }\n\n  if (err) return err;\n\n  // Building the classNames and the styles to use.\n  return buildCss({\n    type: 'flex',\n    bps: bpCals,\n    deep: insertStyles,\n  });\n};\n\nexport default buildFlex;\n","import calPercentage from './calPercentage';\n\nconst relativeMeasures = ['%', 'rem', 'em', 'ex', 'vw', 'vh'];\n\nconst processedNumber = (n: string) => {\n  let nProcessed;\n  if (n.includes('/')) {\n    nProcessed = n.split('/');\n    nProcessed = calPercentage(\n      parseFloat(nProcessed[0]),\n      parseFloat(nProcessed[1])\n    );\n  } else if (n === 'auto') {\n    nProcessed = 'auto';\n  } else {\n    const relativeUnits = relativeMeasures.filter((unit) => {\n      return n.includes(unit);\n    });\n    if (relativeUnits.length) {\n      nProcessed = n;\n    } else {\n      nProcessed = n === '0' ? n : n + 'px';\n    }\n  }\n  return nProcessed;\n};\n\nexport default processedNumber;\n","import { TDirectiveName } from '../config/processors';\nimport buildCss, { IBpCals } from './buildCss';\nimport prepareParam from './prepareParam';\nimport processedNumber from './processedNumber';\n\nconst buildAttr = (\n  values: string,\n  prop: TDirectiveName,\n  insertStyles = false\n) => {\n  const bpCals: IBpCals = {};\n\n  values.split(' ').forEach((param) => {\n    const paramProcessed = prepareParam(param);\n    const bpNames = paramProcessed.breakPoints;\n\n    // processing number values\n    let propValue = paramProcessed.numbers\n      .split('-')\n      .map((n) => processedNumber(n))\n      .join(' ');\n    if (paramProcessed.important) propValue += ' !important';\n    bpCals[bpNames] = {\n      name: param,\n      value: propValue,\n    };\n  });\n\n  // Building the classNames and the styles to use.\n  return buildCss({\n    type: prop,\n    bps: bpCals,\n    deep: insertStyles,\n  });\n};\n\nexport default buildAttr;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildPad = (valPads: string, insertStyles = false) => {\n  return buildAttr(valPads, 'pad', insertStyles);\n};\n\nexport default buildPad;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildPadTop = (valPadTop: string, insertStyles = false) => {\n  return buildAttr(valPadTop, 'padt', insertStyles);\n};\n\nexport default buildPadTop;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildPadRight = (valPadRight: string, insertStyles = false) => {\n  return buildAttr(valPadRight, 'padr', insertStyles);\n};\n\nexport default buildPadRight;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildPadBottom = (valPadBottom: string, insertStyles = false) => {\n  return buildAttr(valPadBottom, 'padb', insertStyles);\n};\n\nexport default buildPadBottom;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildPadLeft = (valPadLeft: string, insertStyles = false) => {\n  return buildAttr(valPadLeft, 'padl', insertStyles);\n};\n\nexport default buildPadLeft;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMar = (valMars: string, insertStyles = false) => {\n  return buildAttr(valMars, 'mar', insertStyles);\n};\n\nexport default buildMar;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMarTop = (valMarTop: string, insertStyles = false) => {\n  return buildAttr(valMarTop, 'mart', insertStyles);\n};\n\nexport default buildMarTop;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMarRight = (valMarRight: string, insertStyles = false) => {\n  return buildAttr(valMarRight, 'marr', insertStyles);\n};\n\nexport default buildMarRight;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMarBottom = (valMarBottom: string, insertStyles = false) => {\n  return buildAttr(valMarBottom, 'marb', insertStyles);\n};\n\nexport default buildMarBottom;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMarLeft = (valMarLeft: string, insertStyles = false) => {\n  return buildAttr(valMarLeft, 'marl', insertStyles);\n};\n\nexport default buildMarLeft;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMaxWidth = (valMaxWidth: string, insertStyles = false) => {\n  return buildAttr(valMaxWidth, 'mxw', insertStyles);\n};\n\nexport default buildMaxWidth;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMaxHeight = (valMaxHeight: string, insertStyles = false) => {\n  return buildAttr(valMaxHeight, 'mxh', insertStyles);\n};\n\nexport default buildMaxHeight;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMinWidth = (valMinWidth: string, insertStyles = false) => {\n  return buildAttr(valMinWidth, 'miw', insertStyles);\n};\n\nexport default buildMinWidth;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildMinHeight = (valMinHeight: string, insertStyles = false) => {\n  return buildAttr(valMinHeight, 'mih', insertStyles);\n};\n\nexport default buildMinHeight;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildHeight = (valHeight: string, insertStyles = false) => {\n  return buildAttr(valHeight, 'hgt', insertStyles);\n};\n\nexport default buildHeight;\n","import buildAttr from '../helpers/buildAttr';\n\nconst buildWidth = (valWidth: string, insertStyles = false) => {\n  return buildAttr(valWidth, 'wdh', insertStyles);\n};\n\nexport default buildWidth;\n","import { processors, TDirectiveName } from '../config/processors';\nimport buildCols from './buildCols';\nimport buildFlex from './buildFlex';\nimport buildPad from './buildPad';\nimport buildPadTop from './buildPadTop';\nimport buildPadRight from './buildPadRight';\nimport buildPadBottom from './buildPadBottom';\nimport buildPadLeft from './buildPadLeft';\nimport buildMar from './buildMar';\nimport buildMarTop from './buildMarTop';\nimport buildMarRight from './buildMarRight';\nimport buildMarBottom from './buildMarBottom';\nimport buildMarLeft from './buildMarLeft';\nimport buildMaxWidth from './buildMaxWidth';\nimport buildMaxHeight from './buildMaxHeight';\nimport buildMinWidth from './buildMinWidth';\nimport buildMinHeight from './buildMinHeight';\nimport buildHeight from './buildHeight';\nimport buildWidth from './buildWidth';\nimport { IStyles } from '../helpers/createStyles';\n\nconst builders = {\n  buildCols,\n  buildFlex,\n  buildPad,\n  buildPadTop,\n  buildPadRight,\n  buildPadBottom,\n  buildPadLeft,\n  buildMar,\n  buildMarTop,\n  buildMarRight,\n  buildMarBottom,\n  buildMarLeft,\n  buildMaxWidth,\n  buildMaxHeight,\n  buildMinWidth,\n  buildMinHeight,\n  buildHeight,\n  buildWidth,\n};\n\nexport interface IBuildResult {\n  [prop: string]: IStyles | boolean;\n}\n\nconst build = (\n  obj: Partial<Record<TDirectiveName, string>>,\n  insertStyles = false\n): Partial<IBuildResult> | Error => {\n  const rObj: Partial<IBuildResult> = {};\n  let err: Error | boolean = false;\n  for (const prop in obj) {\n    const propData = processors[prop as TDirectiveName];\n    const objStyles: IStyles | Error = builders[\n      propData.build as keyof typeof builders\n    ](obj[prop as TDirectiveName] as string, insertStyles);\n    if (objStyles instanceof Error) {\n      err = objStyles;\n      break;\n    } else {\n      rObj[prop] = objStyles;\n    }\n  }\n  if (err) return err;\n  return rObj;\n};\n\nexport default build;\n","const addClasses = (\n  Node: HTMLElement | Element,\n  classesNames: string,\n  overwrite?: boolean\n): Promise<void> => {\n  return new Promise((resolve) => {\n    const names = classesNames.split(' ');\n    let classesToAdd: string[] = names;\n    if (!overwrite) {\n      classesToAdd = names.filter((name) => !Node.classList.contains(name));\n      if (!classesToAdd.length) {\n        resolve();\n        return;\n      }\n    }\n\n    const obsNode = new MutationObserver((mutations) => {\n      const target = mutations[0].target;\n      const currentClasses = (target as Element).className.split(' ');\n      const containsAll = names.every((element) =>\n        currentClasses.includes(element)\n      );\n      if (containsAll) {\n        obsNode.disconnect();\n        resolve();\n      }\n    });\n    obsNode.observe(Node, {\n      childList: false,\n      subtree: false,\n      attributes: true,\n      attributeFilter: ['class'],\n      characterData: false,\n    });\n\n    if (overwrite) {\n      Node.className = classesNames;\n    } else {\n      const space = Node.hasAttribute('class') ? ' ' : '';\n      Node.className += space + classesToAdd.join(' ');\n    }\n  });\n};\n\nexport default addClasses;\n","export const removeProp = (\n  Node: HTMLElement | Element,\n  propName: string\n): Promise<void> => {\n  return new Promise((resolve) => {\n    if (!Node.hasAttribute(propName)) {\n      resolve();\n      return;\n    }\n    const obsNode = new MutationObserver(() => {\n      obsNode.disconnect();\n      resolve();\n    });\n    obsNode.observe(Node, {\n      childList: false,\n      subtree: false,\n      attributes: true,\n      attributeFilter: [propName],\n      characterData: false,\n    });\n    Node.removeAttribute(propName);\n  });\n};\n\nexport const removeProps = (\n  Node: HTMLElement | Element,\n  propNames: string[]\n): Promise<void> => {\n  return new Promise((resolve) => {\n    const promises = propNames.map((name) => removeProp(Node, name));\n    Promise.all(promises).then(() => resolve());\n  });\n};\n\nconst removeAttr = (\n  Node: HTMLElement | Element,\n  propNames: string | string[]\n): Promise<void> => {\n  return new Promise((resolve) => {\n    if (Array.isArray(propNames)) {\n      removeProps(Node, propNames).then(resolve);\n    } else {\n      removeProp(Node, propNames).then(resolve);\n    }\n  });\n};\n\nexport default removeAttr;\n","import addClasses from '../utils/addClasses';\nimport { IStyles } from '../helpers/createStyles';\nimport regError from '../helpers/regError';\nimport build, { IBuildResult } from './build';\nimport getParameters from './getParameters';\nimport removeAttr from '../utils/removeAttr';\nimport { TDirectiveName } from '../config/processors';\n\nconst set = (\n  Node: HTMLElement | Element,\n  parameters?: Partial<Record<TDirectiveName, string>>\n): Promise<void | Error> => {\n  return new Promise((resolve, reject) => {\n    const params = parameters || getParameters(Node);\n    const arrParams = Object.keys(params);\n    if (!arrParams.length) {\n      const err = regError(\n        'Parameter Missing',\n        \"don't exists any parameter to process\",\n        Node\n      );\n      reject(err);\n      return;\n    }\n\n    const toBuild: Partial<Record<TDirectiveName, string>> = {};\n    for (const prop in params) {\n      toBuild[prop as TDirectiveName] = params[prop as TDirectiveName];\n    }\n\n    // creating classes names and inserting that classes to the core\n    const classesObj = build(toBuild as Record<TDirectiveName, string>, true);\n    if (classesObj instanceof Error) {\n      reject(classesObj);\n      return;\n    }\n\n    // adding classes\n    const classes = classesObj as Partial<IBuildResult>;\n    const classesNames = Object.keys(classes)\n      .map((name: string) => Object.keys(classes[name] as IStyles))\n      .flat()\n      .join(' ');\n\n    // removing unnecessary props\n    removeAttr(Node, arrParams)\n      .then(() => addClasses(Node, classesNames))\n      .then(() => {\n        resolve();\n        const event = new CustomEvent('layout:ready');\n        Node.dispatchEvent(event);\n      });\n  });\n};\n\nexport default set;\n","import addClasses from '../utils/addClasses';\nimport regError from '../helpers/regError';\nimport buildFlex from './buildFlex';\nimport removeAttr from '../utils/removeAttr';\n\nconst setFlex = (\n  Node: HTMLElement | Element,\n  flexValues?: string\n): Promise<void | Error> => {\n  return new Promise((resolve, reject) => {\n    const values = flexValues || Node.getAttribute('flex');\n    if (!values) {\n      const err = regError(\n        'Empty',\n        'The value of the directive \"flex\" is empty',\n        Node\n      );\n      reject(err);\n      return;\n    }\n\n    // Creating, inserting, and adding classNames of rules in Node.\n    const objStyles = buildFlex(values, true);\n    if (objStyles instanceof Error) {\n      reject(objStyles);\n      return;\n    }\n\n    const classesToAdd = Object.keys(objStyles).join(' ');\n\n    // removing prop of Node and adding the corresponding classes\n    removeAttr(Node, 'flex')\n      .then(() => addClasses(Node, classesToAdd))\n      .then(() => {\n        resolve();\n        const event = new CustomEvent('layout:ready');\n        Node.dispatchEvent(event);\n      });\n  });\n};\n\nexport default setFlex;\n","import addClasses from '../utils/addClasses';\nimport regError from '../helpers/regError';\nimport buildCols from './buildCols';\nimport removeAttr from '../utils/removeAttr';\n\nconst setCols = (\n  Node: HTMLElement | Element,\n  columns?: string\n): Promise<void | Error> => {\n  return new Promise((resolve, reject) => {\n    const values = columns || Node.getAttribute('cols');\n    if (!values) {\n      const err = regError(\n        'Empty',\n        \"The value of the directive 'cols' is empty\",\n        Node\n      );\n      reject(err);\n      return;\n    }\n\n    // Creating, inserting, and adding classNames of rules in Node.\n    const objStyles = buildCols(values, true);\n    if (objStyles instanceof Error) {\n      reject(objStyles);\n      return;\n    }\n    const classesToAdd = Object.keys(objStyles).join(' ');\n\n    // removing prop of Node and adding the corresponding classes\n    removeAttr(Node, 'cols')\n      .then(() => addClasses(Node, classesToAdd))\n      .then(() => {\n        resolve();\n        const event = new CustomEvent('layout:ready');\n        Node.dispatchEvent(event);\n      });\n  });\n};\n\nexport default setCols;\n","import addClasses from '../utils/addClasses';\nimport buildAttr from '../helpers/buildAttr';\nimport regError from '../helpers/regError';\nimport removeAttr from '../utils/removeAttr';\nimport { TDirectiveName } from '../config/processors';\n\nconst setAttr = (\n  Node: HTMLElement | Element,\n  directive: TDirectiveName,\n  values?: string\n): Promise<void | Error> => {\n  return new Promise((resolve, reject) => {\n    const directiveValues = values || Node.getAttribute(directive);\n    if (!directiveValues) {\n      const err = regError(\n        'Empty',\n        'The value of the directive \"' + directive + '\" is empty',\n        Node\n      );\n      reject(err);\n      return;\n    }\n\n    // Creating, inserting, and adding classNames of rules in Node.\n    const objStyles = buildAttr(directiveValues, directive, true);\n    const classesToAdd = Object.keys(objStyles).join(' ');\n\n    // removing prop of Node and adding the corresponding classes\n    removeAttr(Node, directive)\n      .then(() => addClasses(Node, classesToAdd))\n      .then(() => {\n        resolve();\n        const event = new CustomEvent('layout:ready');\n        Node.dispatchEvent(event);\n      });\n  });\n};\n\nexport default setAttr;\n","import setAttr from './setAttr';\n\nconst setHeight = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'hgt', values);\n};\n\nexport default setHeight;\n","import setAttr from './setAttr';\n\nconst setMarBottom = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'marb', values);\n};\n\nexport default setMarBottom;\n","import setAttr from './setAttr';\n\nconst setMarLeft = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'marl', values);\n};\n\nexport default setMarLeft;\n","import setAttr from './setAttr';\n\nconst setMarRight = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'marr', values);\n};\n\nexport default setMarRight;\n","import setAttr from './setAttr';\n\nconst setMar = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'mar', values);\n};\n\nexport default setMar;\n","import setAttr from './setAttr';\n\nconst setMarTop = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'mart', values);\n};\n\nexport default setMarTop;\n","import setAttr from './setAttr';\n\nconst setMaxWidth = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'mxw', values);\n};\n\nexport default setMaxWidth;\n","import setAttr from './setAttr';\n\nconst setMinHeight = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'mih', values);\n};\n\nexport default setMinHeight;\n","import setAttr from './setAttr';\n\nconst setMinWidth = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'miw', values);\n};\n\nexport default setMinWidth;\n","import setAttr from './setAttr';\n\nconst setPadBottom = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'padb', values);\n};\n\nexport default setPadBottom;\n","import setAttr from './setAttr';\n\nconst setPadLeft = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'padl', values);\n};\n\nexport default setPadLeft;\n","import setAttr from './setAttr';\n\nconst setPadRight = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'padr', values);\n};\n\nexport default setPadRight;\n","import setAttr from './setAttr';\n\nconst setPad = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'pad', values);\n};\n\nexport default setPad;\n","import setAttr from './setAttr';\n\nconst setPadTop = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'padt', values);\n};\n\nexport default setPadTop;\n","import setAttr from './setAttr';\n\nconst setWidth = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'wdh', values);\n};\n\nexport default setWidth;\n","import setAttr from './setAttr';\n\nconst setMaxHeight = (\n  Node: HTMLElement | Element,\n  values?: string\n): Promise<void | Error> => {\n  return setAttr(Node, 'mxh', values);\n};\n\nexport default setMaxHeight;\n","import { processors } from '../config/processors';\nimport addClasses from '../utils/addClasses';\nimport removeAttr from '../utils/removeAttr';\n\nconst reset = (Node: HTMLElement | Element): Promise<void> => {\n  return new Promise((resolve) => {\n    const layouterClasses = Object.keys(processors);\n    const restClass: string[] = [];\n    Node.className.split(' ').filter((name) => {\n      // the name of a class with minus of 4 letters dont follow the syntax of a class name created by the system, so is a normal class name\n      if (name.length < 4) {\n        restClass.push(name);\n        return false;\n      }\n      const nPrex = name.length >= 5 ? 5 : 4;\n      let prex = name.substring(0, nPrex);\n      const lineIndex = prex.split('').indexOf('-');\n      // if the class name haven't a line can't be a class name created by the system\n      if (lineIndex === -1) {\n        restClass.push(name);\n        return false;\n      }\n      prex = prex.substring(0, lineIndex);\n      // if the extraction of the prefix of the class name follow the name of a directive is a class name created by the system\n      if (layouterClasses.includes(prex)) {\n        return true;\n      } else {\n        // if dont, so is a coincidence, but is not a valid class name created by the system\n        restClass.push(name);\n        return false;\n      }\n    });\n    if (restClass.length) {\n      const classesName = restClass.join(' ');\n      addClasses(Node, classesName, true).then(() => {\n        resolve();\n      });\n    } else {\n      removeAttr(Node, 'class').then(() => {\n        resolve();\n      });\n    }\n  });\n};\n\nexport default reset;\n","import { ILayouter } from './../layouter';\nimport { processors } from '../config/processors';\n\nconst initAutoProcessor = (layouter: ILayouter) => {\n  return new Promise((resolve) => {\n    const props = Object.keys(processors);\n    const attrs = props.map((prop) => `[${prop}]`).join(', ');\n    const nodes = document.querySelectorAll(attrs);\n    const setNodes = new Set();\n    Array.prototype.forEach.call(nodes, (itemNode) => {\n      setNodes.add(itemNode);\n    });\n    const promises: Promise<void | Error>[] = [];\n    setNodes.forEach((node) => {\n      promises.push(layouter.set(node as Element | HTMLElement));\n    });\n    Promise.all(promises).then(resolve);\n  });\n};\n\nexport default initAutoProcessor;\n","import { ILayouter } from './../layouter';\nimport { processors } from '../config/processors';\n\nconst mainObserver = (layouter: ILayouter) => {\n  const props = Object.keys(processors);\n  const obsBody = new MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n      if (mutation.type === 'childList') {\n        if (!mutation.addedNodes.length) {\n          continue;\n        }\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof HTMLElement) {\n            const props = layouter.getParameters(node);\n            if (Object.keys(props).length) {\n              layouter.set(node, props);\n            }\n          }\n        });\n      } else if (mutation.type === 'attributes') {\n        const node = mutation.target;\n        if (node instanceof HTMLElement) {\n          const props = layouter.getParameters(node);\n          if (Object.keys(props).length) {\n            layouter.set(node, props);\n          }\n        }\n      }\n    }\n  });\n  const observerOptions = {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    attributeFilter: props,\n    characterData: false,\n  };\n  obsBody.observe(document.body, observerOptions);\n};\n\nexport default mainObserver;\n","import { IConfig, IConfigUser, setConfig, updateConfig } from './config/main';\nimport getParameters from './methods/getParameters';\n\nimport build from './methods/build';\nimport buildCols from './methods/buildCols';\nimport buildFlex from './methods/buildFlex';\nimport buildPad from './methods/buildPad';\nimport buildPadTop from './methods/buildPadTop';\nimport buildPadRight from './methods/buildPadRight';\nimport buildPadBottom from './methods/buildPadBottom';\nimport buildPadLeft from './methods/buildPadLeft';\nimport buildMar from './methods/buildMar';\nimport buildMarTop from './methods/buildMarTop';\nimport buildMarRight from './methods/buildMarRight';\nimport buildMarBottom from './methods/buildMarBottom';\nimport buildMarLeft from './methods/buildMarLeft';\nimport buildMaxWidth from './methods/buildMaxWidth';\nimport buildMaxHeight from './methods/buildMaxHeight';\nimport buildMinWidth from './methods/buildMinWidth';\nimport buildMinHeight from './methods/buildMinHeight';\nimport buildHeight from './methods/buildHeight';\nimport buildWidth from './methods/buildWidth';\n\nimport set from './methods/set';\nimport setFlex from './methods/setFlex';\nimport setCols from './methods/SetCols';\nimport setHeight from './methods/setHeight';\nimport setMarBottom from './methods/setMarBottom';\nimport setMarLeft from './methods/setMarLeft';\nimport setMarRight from './methods/setMarRight';\nimport setMar from './methods/setMar';\nimport setMarTop from './methods/setMarTop';\nimport setMaxWidth from './methods/setMaxWidth';\nimport setMinHeight from './methods/setMinHeight';\nimport setMinWidth from './methods/setMinWidth';\nimport setPadBottom from './methods/setPadBottom';\nimport setPadLeft from './methods/setPadLeft';\nimport setPadRight from './methods/setPadRight';\nimport setPad from './methods/setPad';\nimport setPadTop from './methods/setPadTop';\nimport setWidth from './methods/setWidth';\nimport setMaxHeight from './methods/setMaxHeight';\n\nimport insertRules from './methods/insertRules';\nimport reset from './methods/reset';\n\nimport { IStyles } from './helpers/createStyles';\nimport { IBuildResult } from './methods/build';\nimport initAutoProcessor from './helpers/initAutoProcessor';\nimport mainObserver from './helpers/mainObserver';\nimport { TDirectiveName } from './config/processors';\n\nexport interface ILayouter extends IConfig {\n  getParameters: (\n    Node: HTMLElement | Element\n  ) => Partial<Record<TDirectiveName, string>>;\n  updateConfig: (userConfig: Partial<Omit<IConfigUser, 'bridge'>>) => IConfig;\n  build: (\n    obj: Partial<Record<TDirectiveName, string>>,\n    insertStyles?: boolean\n  ) => Partial<IBuildResult> | Error;\n  buildCols: (valCols: string, insertStyles?: boolean) => IStyles | Error;\n  buildFlex: (valFlex: string, insertStyles?: boolean) => IStyles | Error;\n  buildPad: (valPads: string, insertStyles?: boolean) => IStyles | boolean;\n  buildPadTop: (valPadTop: string, insertStyles?: boolean) => IStyles | boolean;\n  buildPadRight: (\n    valPadRight: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildPadBottom: (\n    valPadBottom: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildPadLeft: (\n    valPadLeft: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMar: (valMars: string, insertStyles?: boolean) => IStyles | boolean;\n  buildMarTop: (valMarTop: string, insertStyles?: boolean) => IStyles | boolean;\n  buildMarRight: (\n    valMarRight: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMarBottom: (\n    valMarBottom: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMarLeft: (\n    valMarLeft: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMaxWidth: (\n    valMaxWidth: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMaxHeight: (\n    valMaxHeight: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMinWidth: (\n    valMinWidth: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMinHeight: (\n    valMinHeight: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildHeight: (valHeight: string, insertStyles?: boolean) => IStyles | boolean;\n  buildWidth: (valWidth: string, insertStyles?: boolean) => IStyles | boolean;\n  set: (\n    Node: HTMLElement | Element,\n    parameters?: Partial<Record<TDirectiveName, string>>\n  ) => Promise<void | Error>;\n  setCols: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setFlex: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMar: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarTop: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarRight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarBottom: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarLeft: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPad: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadTop: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadRight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadBottom: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadLeft: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMinWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMaxWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMinHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMaxHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  insertRules: (objStyles: IStyles) => void;\n  reset: (Node: HTMLElement | Element) => Promise<void>;\n  version: string;\n}\n\ndeclare global {\n  interface Window {\n    layouter: ILayouter;\n  }\n}\n\nconst layouter = (userConfig: Partial<IConfigUser> = {}): ILayouter => {\n  const config = setConfig(userConfig);\n\n  const instance = {\n    ...config,\n    getParameters,\n    updateConfig,\n    insertRules,\n    build,\n    buildCols,\n    buildFlex,\n    buildPad,\n    buildPadTop,\n    buildPadRight,\n    buildPadBottom,\n    buildPadLeft,\n    buildMar,\n    buildMarTop,\n    buildMarRight,\n    buildMarBottom,\n    buildMarLeft,\n    buildMaxWidth,\n    buildMaxHeight,\n    buildMinWidth,\n    buildMinHeight,\n    buildHeight,\n    buildWidth,\n    set,\n    setCols,\n    setFlex,\n    setMar,\n    setMarTop,\n    setMarRight,\n    setMarBottom,\n    setMarLeft,\n    setPad,\n    setPadTop,\n    setPadRight,\n    setPadBottom,\n    setPadLeft,\n    setWidth,\n    setMinWidth,\n    setMaxWidth,\n    setHeight,\n    setMinHeight,\n    setMaxHeight,\n    reset,\n  };\n\n  // Auto init process\n  initAutoProcessor(instance).then(() => {\n    if (instance.ready) instance.ready(instance);\n    mainObserver(instance);\n  });\n\n  return instance;\n};\n\nif (window && typeof exports === 'undefined') {\n  window.layouter = layouter();\n}\n\nexport default layouter;\n"],"names":["config"],"mappings":"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"}