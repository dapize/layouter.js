{"version":3,"file":"layouter.umd.js","sources":["../src/helpers/breakpointsNums.ts","../src/helpers/createScopeStyles.ts","../src/helpers/scopesStylesBuilder.ts","../src/helpers/breakpointsOrdered.ts","../src/config/main.ts","../src/config/processors.ts","../src/methods/getParameters.ts","../src/helpers/prepareParam.ts","../src/helpers/regError.ts","../src/helpers/calPercentage.ts","../src/helpers/getScopeByclassName.ts","../src/methods/insertRules.ts","../src/config/flex.ts","../src/helpers/percentageConverter.ts","../src/helpers/createStyles.ts","../src/helpers/nameCleaner.ts","../src/helpers/buildCss.ts","../src/methods/buildCols.ts","../src/methods/buildFlex.ts","../src/helpers/processedNumber.ts","../src/helpers/buildAttr.ts","../src/methods/buildPad.ts","../src/methods/buildPadTop.ts","../src/methods/buildPadRight.ts","../src/methods/buildPadBottom.ts","../src/methods/buildPadLeft.ts","../src/methods/buildMar.ts","../src/methods/buildMarTop.ts","../src/methods/buildMarRight.ts","../src/methods/buildMarBottom.ts","../src/methods/buildMarLeft.ts","../src/methods/buildMaxWidth.ts","../src/methods/buildMaxHeight.ts","../src/methods/buildMinWidth.ts","../src/methods/buildMinHeight.ts","../src/methods/buildHeight.ts","../src/methods/buildWidth.ts","../src/methods/build.ts","../src/utils/addClasses.ts","../src/utils/removeAttr.ts","../src/methods/set.ts","../src/methods/setFlex.ts","../src/methods/SetCols.ts","../src/methods/setAttr.ts","../src/methods/setHeight.ts","../src/methods/setMarBottom.ts","../src/methods/setMarLeft.ts","../src/methods/setMarRight.ts","../src/methods/setMar.ts","../src/methods/setMarTop.ts","../src/methods/setMaxWidth.ts","../src/methods/setMinHeight.ts","../src/methods/setMinWidth.ts","../src/methods/setPadBottom.ts","../src/methods/setPadLeft.ts","../src/methods/setPadRight.ts","../src/methods/setPad.ts","../src/methods/setPadTop.ts","../src/methods/setWidth.ts","../src/methods/setMaxHeight.ts","../src/methods/reset.ts","../src/helpers/initAutoProcessor.ts","../src/helpers/mainObserver.ts","../src/layouter.ts"],"sourcesContent":["export type TNumProp = 'width' | 'cols';\r\n\r\nexport interface IBreakpoint {\r\n  alias: string;\r\n  width: number;\r\n}\r\n\r\nexport interface IBreakpoints {\r\n  [alias: string]: {\r\n    width: number;\r\n    cols: number;\r\n  };\r\n}\r\n\r\nexport interface IBreakpointObj {\r\n  [alias: string]: number;\r\n}\r\n\r\nconst breakpointsNums = (\r\n  objBps: IBreakpoints,\r\n  propName: TNumProp\r\n): IBreakpointObj => {\r\n  const sizes: IBreakpointObj = {};\r\n\r\n  if (propName === 'width') {\r\n    Object.keys(objBps)\r\n      .map((bp: string) => {\r\n        return {\r\n          alias: bp,\r\n          width: objBps[bp].width,\r\n        };\r\n      })\r\n      .sort((a: IBreakpoint, b: IBreakpoint) =>\r\n        a.width > b.width ? 1 : b.width > a.width ? -1 : 0\r\n      )\r\n      .forEach((bp: IBreakpoint, index: number) => {\r\n        sizes[bp.alias] = !index ? 0 : objBps[bp.alias][propName];\r\n      });\r\n  } else {\r\n    Object.keys(objBps).forEach((bp) => {\r\n      sizes[bp] = objBps[bp][propName];\r\n    });\r\n  }\r\n\r\n  return sizes;\r\n};\r\n\r\nexport default breakpointsNums;\r\n","export type TInsertion = 'before' | 'after' | 'append';\r\n\r\nexport interface ICreateScopeStyles {\r\n  bridge?: boolean;\r\n  bp: string;\r\n  insertionType: TInsertion;\r\n  node: HTMLElement;\r\n}\r\n\r\nexport interface IRCreateScopeStyles {\r\n  method:\r\n    | CSSStyleSheet\r\n    | {\r\n        insertRule: (ruleCss: string) => void;\r\n        rules: string[];\r\n      };\r\n  node: HTMLElement;\r\n}\r\n\r\nconst createScopeStyles = ({\r\n  bridge: withBridge,\r\n  bp,\r\n  insertionType,\r\n  node,\r\n}: ICreateScopeStyles): IRCreateScopeStyles => {\r\n  let stylesScope = document.getElementById('layouter-' + bp);\r\n  if (!stylesScope) {\r\n    stylesScope = document.createElement('style');\r\n    stylesScope.appendChild(document.createTextNode('')); // WebKit hack :(\r\n    const nodeParent = node.parentNode as HTMLDivElement;\r\n    switch (insertionType) {\r\n      case 'before':\r\n        nodeParent.insertBefore(stylesScope, node);\r\n        break;\r\n      case 'after':\r\n        node.nextSibling\r\n          ? nodeParent.insertBefore(stylesScope, node.nextSibling)\r\n          : nodeParent.appendChild(stylesScope);\r\n        break;\r\n      case 'append':\r\n        node.appendChild(stylesScope);\r\n        break;\r\n    }\r\n    stylesScope.id = 'layouter-' + bp;\r\n  }\r\n\r\n  let bridge: IRCreateScopeStyles;\r\n  if (withBridge) {\r\n    bridge = {\r\n      method: (stylesScope as HTMLStyleElement).sheet as CSSStyleSheet,\r\n      node: stylesScope,\r\n    };\r\n  } else {\r\n    bridge = {\r\n      method: {\r\n        insertRule: (ruleCss: string) => {\r\n          (stylesScope as HTMLDivElement).appendChild(\r\n            document.createTextNode(ruleCss)\r\n          );\r\n        },\r\n        rules: [],\r\n      },\r\n      node: stylesScope,\r\n    };\r\n  }\r\n  return bridge;\r\n};\r\n\r\nexport default createScopeStyles;\r\n","import { IBreakpoints } from './breakpointsNums';\r\nimport createScopeStyles, { IRCreateScopeStyles } from './createScopeStyles';\r\n\r\nexport interface IScopes {\r\n  [name: string]: IRCreateScopeStyles;\r\n}\r\n\r\nexport const scopesStylesBuilder = (\r\n  breakpoints: IBreakpoints,\r\n  bridge: boolean,\r\n  scope?: IScopes\r\n): IScopes => {\r\n  const scopes: IScopes = scope || {};\r\n  Object.keys(breakpoints).forEach((bp: string) => {\r\n    if (!scopes[bp]) {\r\n      scopes[bp] = createScopeStyles({\r\n        bridge,\r\n        bp,\r\n        insertionType: 'append',\r\n        node: document.body,\r\n      });\r\n    }\r\n  });\r\n  return scopes;\r\n};\r\n","import { ICols } from '../config/main';\r\nimport { IBreakpoints } from './breakpointsNums';\r\n\r\nconst breakpointsOrdered = (bps: IBreakpoints, sizes: ICols) => {\r\n  const bpsOrdered: IBreakpoints = {};\r\n  Object.keys(sizes).forEach((bpName) => (bpsOrdered[bpName] = bps[bpName]));\r\n  return bpsOrdered;\r\n};\r\n\r\nexport default breakpointsOrdered;\r\n","import { ILayouter } from './../layouter';\nimport breakpointsNums, { IBreakpoints } from '../helpers/breakpointsNums';\nimport { IScopes, scopesStylesBuilder } from '../helpers/scopesStylesBuilder';\nimport breakpointsOrdered from '../helpers/breakpointsOrdered';\nimport { version } from '../../package.json';\n\nexport interface ICols {\n  [colAlias: string]: number;\n}\n\nexport interface IConfigUser {\n  prefix: string;\n  breakpoints: IBreakpoints;\n  bridge: boolean;\n  debug?: boolean;\n  ready?: (instance: ILayouter) => void;\n}\n\ninterface IConfigNums {\n  scope: IScopes;\n  cols: ICols;\n  sizes: ICols;\n  breakpoints: IBreakpoints;\n}\n\nexport interface IConfig extends Omit<IConfigUser, 'breakpoints'>, IConfigNums {\n  styles: {\n    [className: string]: string;\n  };\n  version: string;\n}\n\ndeclare global {\n  interface Window {\n    layouterConfig: Partial<IConfigUser>;\n  }\n}\n\nconst breakpointsInit: IBreakpoints = {\n  xs: {\n    width: 360,\n    cols: 15,\n  },\n  sm: {\n    width: 600,\n    cols: 25,\n  },\n  md: {\n    width: 900,\n    cols: 31,\n  },\n  lg: {\n    width: 1200,\n    cols: 41,\n  },\n  xlg: {\n    width: 1536,\n    cols: 51,\n  },\n};\n\nexport let baseConfig: IConfigUser = {\n  prefix: '',\n  breakpoints: breakpointsInit,\n  bridge: true,\n  debug: true,\n};\n\nlet config: IConfig;\n\nconst configNums = (\n  bps: IBreakpoints,\n  bridge: boolean,\n  scope?: IScopes\n): IConfigNums => {\n  const sizes = breakpointsNums(bps, 'width');\n  const finalBps = breakpointsOrdered(bps, sizes);\n  return {\n    sizes,\n    cols: breakpointsNums(bps, 'cols'),\n    scope: scopesStylesBuilder(finalBps, bridge, scope),\n    breakpoints: finalBps,\n  };\n};\n\nexport const setConfig = (customCfg: Partial<IConfigUser> = {}): IConfig => {\n  if (typeof window !== \"undefined\") {\n    baseConfig = {\n      ...baseConfig,\n      ...window.layouterConfig,\n      ...customCfg,\n    };\n  } else {\n    if (customCfg) {\n      baseConfig = {\n        ...baseConfig,\n        ...customCfg,\n      };\n    }\n  }\n\n  config = {\n    ...baseConfig,\n    ...configNums(baseConfig.breakpoints, baseConfig.bridge),\n    styles: {},\n    version,\n  };\n\n  return config;\n};\n\nexport const setStyles = (className: string, value: string) => {\n  config.styles[className] = value;\n};\n\nconst getConfig = (reset = false): IConfig => {\n  return reset ? setConfig() : config;\n};\n\nexport const updateConfig = (userConfig: Partial<IConfigUser>): IConfig => {\n  config = {\n    ...config,\n    ...userConfig,\n  };\n\n  if (userConfig.breakpoints) {\n    config = {\n      ...config,\n      ...configNums(config.breakpoints, config.bridge, config.scope),\n    };\n  }\n\n  return config;\n};\n\nexport default getConfig;\n","export type TDirectiveName =\r\n  | 'cols'\r\n  | 'pad'\r\n  | 'padt'\r\n  | 'padr'\r\n  | 'padb'\r\n  | 'padl'\r\n  | 'mar'\r\n  | 'mart'\r\n  | 'marr'\r\n  | 'marb'\r\n  | 'marl'\r\n  | 'flex'\r\n  | 'mxw'\r\n  | 'mxh'\r\n  | 'miw'\r\n  | 'mih'\r\n  | 'wdh'\r\n  | 'hgt';\r\n\r\nexport interface IProcessor {\r\n  set: string;\r\n  build: string;\r\n  ruleCss: string;\r\n}\r\n\r\nexport const processors: Record<TDirectiveName, IProcessor> = {\r\n  cols: {\r\n    set: 'setCols',\r\n    build: 'buildCols',\r\n    ruleCss: 'width',\r\n  },\r\n\r\n  // Paddings\r\n  pad: {\r\n    set: 'setPad',\r\n    build: 'buildPad',\r\n    ruleCss: 'padding',\r\n  },\r\n  padt: {\r\n    set: 'setPadTop',\r\n    build: 'buildPadTop',\r\n    ruleCss: 'padding-top',\r\n  },\r\n  padr: {\r\n    set: 'setPadRight',\r\n    build: 'buildPadRight',\r\n    ruleCss: 'padding-right',\r\n  },\r\n  padb: {\r\n    set: 'setPadBottom',\r\n    build: 'buildPadBottom',\r\n    ruleCss: 'padding-bottom',\r\n  },\r\n  padl: {\r\n    set: 'setPadLeft',\r\n    build: 'buildPadLeft',\r\n    ruleCss: 'padding-left',\r\n  },\r\n\r\n  // Margin\r\n  mar: {\r\n    set: 'setMar',\r\n    build: 'buildMar',\r\n    ruleCss: 'margin',\r\n  },\r\n  mart: {\r\n    set: 'setMarTop',\r\n    build: 'buildMarTop',\r\n    ruleCss: 'margin-top',\r\n  },\r\n  marr: {\r\n    set: 'setMarRight',\r\n    build: 'buildMarRight',\r\n    ruleCss: 'margin-right',\r\n  },\r\n  marb: {\r\n    set: 'setMarBottom',\r\n    build: 'buildMarBottom',\r\n    ruleCss: 'margin-bottom',\r\n  },\r\n  marl: {\r\n    set: 'setMarLeft',\r\n    build: 'buildMarLeft',\r\n    ruleCss: 'margin-left',\r\n  },\r\n\r\n  // Flex Box\r\n  flex: {\r\n    set: 'setFlex',\r\n    build: 'buildFlex',\r\n    ruleCss: 'display: flex',\r\n  },\r\n\r\n  // Max & Min Width & Height\r\n  mxw: {\r\n    set: 'setMaxWidth',\r\n    build: 'buildMaxWidth',\r\n    ruleCss: 'max-width',\r\n  },\r\n\r\n  mxh: {\r\n    set: 'setMaxHeight',\r\n    build: 'buildMaxHeight',\r\n    ruleCss: 'max-height',\r\n  },\r\n\r\n  miw: {\r\n    set: 'setMinWidth',\r\n    build: 'buildMinWidth',\r\n    ruleCss: 'min-width',\r\n  },\r\n\r\n  mih: {\r\n    set: 'setMinHeight',\r\n    build: 'buildMinHeight',\r\n    ruleCss: 'min-height',\r\n  },\r\n\r\n  // Width & Height\r\n  wdh: {\r\n    set: 'setWidth',\r\n    build: 'buildWidth',\r\n    ruleCss: 'width',\r\n  },\r\n\r\n  hgt: {\r\n    set: 'setHeight',\r\n    build: 'buildHeight',\r\n    ruleCss: 'height',\r\n  },\r\n};\r\n","import { processors, TDirectiveName } from '../config/processors';\r\n\r\nconst getParameters = (\r\n  Node: HTMLElement | Element\r\n): Partial<Record<TDirectiveName, string>> => {\r\n  const params: Partial<Record<TDirectiveName, string>> = {};\r\n  const attrs = Node.attributes;\r\n  const paramNames = Object.keys(processors);\r\n  Array.prototype.forEach.call(attrs, (attr) => {\r\n    if (paramNames.includes(attr.name)) {\r\n      if (attr.value !== '')\r\n        params[attr.name as TDirectiveName] = attr.value\r\n          .trim()\r\n          .split(' ')\r\n          .filter((item: string) => item)\r\n          .join(' ');\r\n    }\r\n  });\r\n  return params;\r\n};\r\n\r\nexport default getParameters;\r\n","import getConfig from '../config/main';\r\n\r\nexport interface IPrepareParamObj {\r\n  widthBp: boolean;\r\n  numbers: string;\r\n  breakPoints: string;\r\n  important: boolean;\r\n}\r\n\r\nconst prepareParam = (param: string): IPrepareParamObj => {\r\n  let bp: string;\r\n  let argParam = param;\r\n  let important = false;\r\n  const haveBp = argParam.includes('@');\r\n  if (haveBp) {\r\n    const bpSplited = argParam.split('@');\r\n    argParam = bpSplited[0];\r\n    bp = bpSplited[1];\r\n  } else {\r\n    const config = getConfig();\r\n    bp = Object.keys(config.breakpoints)[0];\r\n  }\r\n\r\n  if (param.includes('!')) {\r\n    important = true;\r\n    bp = bp.replace(/!/g, '');\r\n    argParam = argParam.replace(/!/g, '');\r\n  }\r\n\r\n  return {\r\n    widthBp: haveBp,\r\n    numbers: argParam,\r\n    breakPoints: bp,\r\n    important,\r\n  };\r\n};\r\n\r\nexport default prepareParam;\r\n","import config from '../config/main';\r\n\r\nconst regError = (\r\n  name: string,\r\n  message: string,\r\n  Node?: Element | HTMLElement\r\n): Error => {\r\n  const err = new Error();\r\n  err.name = name;\r\n  err.message = message;\r\n  const intConfig = config();\r\n  if (intConfig.debug) {\r\n    console.error(err);\r\n    if (Node) console.log(Node);\r\n  }\r\n  return err;\r\n};\r\n\r\nexport default regError;\r\n","const calPercentage = (n1: number, n2: number): string => {\r\n  const cal = (n1 * 100) / n2;\r\n  const haveDecimal = cal - Math.floor(cal) !== 0;\r\n  const result = haveDecimal ? cal.toFixed(3) : cal;\r\n  return result + '%';\r\n};\r\n\r\nexport default calPercentage;\r\n","import config from '../config/main';\r\nimport createScopeStyles, { IRCreateScopeStyles } from './createScopeStyles';\r\n\r\nconst getScopeByclassName = (className: string): IRCreateScopeStyles => {\r\n  const nameClass = className.replace(/!/g, '');\r\n  const atIndex = nameClass.indexOf('@');\r\n  const intConfig = config();\r\n  const scope = intConfig.scope;\r\n  const bridge = intConfig.bridge;\r\n\r\n  // Haven´t a BP designed\r\n  if (atIndex === -1) {\r\n    const firstBp = Object.keys(intConfig.breakpoints)[0];\r\n    return scope[firstBp as string];\r\n  }\r\n\r\n  // Have a BP designed, a normal BP.\r\n  const bp = nameClass.substring(atIndex + 1);\r\n  if (!bp.includes('-')) return scope[bp]; // A simple BP (13/15@lg), not compound (like this: 13/15@sm-md).\r\n\r\n  // A BP until. Example 13/15@-md\r\n  if (bp.substring(0, 1) === '-') {\r\n    if (scope[bp]) return scope[bp]; // exists the Scope.\r\n    const bpUntil = bp.substring(1);\r\n    scope[bp] = createScopeStyles({\r\n      bridge: bridge,\r\n      bp,\r\n      insertionType: 'before',\r\n      node: scope[bpUntil].node,\r\n    });\r\n    return scope[bp]; // returning a new scope created\r\n  }\r\n\r\n  // A BP from and until (a BP compound). Example: Example 13/15@sm-md\r\n  if (scope[bp]) {\r\n    return scope[bp]; // exists the Scope.\r\n  }\r\n\r\n  const fromBp = bp.split('-')[0];\r\n  scope[bp] = createScopeStyles({\r\n    bridge: bridge,\r\n    bp,\r\n    insertionType: 'after',\r\n    node: scope[fromBp].node,\r\n  });\r\n\r\n  return scope[bp]; // returning a new scope compounded created\r\n};\r\n\r\nexport default getScopeByclassName;\r\n","import config, { setStyles } from '../config/main';\r\nimport { IStyles } from '../helpers/createStyles';\r\nimport getScopeByclassName from '../helpers/getScopeByclassName';\r\n\r\nconst insertRules = (objStyles: IStyles) => {\r\n  const intConfig = config();\r\n\r\n  for (const className in objStyles) {\r\n    if (!intConfig.styles[className]) {\r\n      const nodeScope = getScopeByclassName(className);\r\n      const valClass = objStyles[className];\r\n      const rules = nodeScope.method.rules;\r\n      nodeScope.method.insertRule(valClass, rules ? rules.length : 0);\r\n      setStyles(className, valClass); // saving in styles vault\r\n    }\r\n  }\r\n};\r\n\r\nexport default insertRules;\r\n","export const flexProsAndVals = {\r\n  jc: 'justify-content',\r\n  ai: 'align-items',\r\n  ce: 'center',\r\n  fs: 'flex-start',\r\n  fe: 'flex-end',\r\n  sb: 'space-between',\r\n  sa: 'space-around',\r\n  fw: 'flex-wrap',\r\n  nw: 'nowrap',\r\n  w: 'wrap',\r\n  wr: 'wrap-reverse',\r\n  fd: 'flex-direction',\r\n  r: 'row',\r\n  rr: 'row-reverse',\r\n  co: 'column',\r\n  cor: 'column-reverse',\r\n  fg: 'flex-grow',\r\n  fh: 'flex-shrink',\r\n  as: 'align-self',\r\n  or: 'order',\r\n  au: 'auto',\r\n  st: 'stretch',\r\n  bl: 'baseline',\r\n  in: 'initial',\r\n  ih: 'inherit',\r\n};\r\n\r\nexport const flexAttrsSelf = ['fg', 'fh', 'or'];\r\n","const percentageConverter = (percentage: string) => {\r\n  return '0¯' + percentage.replace('%', '');\r\n};\r\n\r\nexport default percentageConverter;\r\n","import { flexAttrsSelf } from '../config/flex';\r\nimport config from '../config/main';\r\nimport { processors, TDirectiveName } from '../config/processors';\r\nimport { IBpCals } from './buildCss';\r\nimport percentageConverter from './percentageConverter';\r\n\r\nexport interface IStyles {\r\n  [name: string]: string;\r\n}\r\n\r\nconst createStyles = (directive: TDirectiveName, bps: IBpCals): IStyles => {\r\n  const intConfig = config();\r\n  const sizes = intConfig.sizes;\r\n  const prefix = intConfig.prefix;\r\n  const prop = processors[directive].ruleCss;\r\n  const styles: IStyles = {};\r\n\r\n  Object.keys(bps).forEach((bp) => {\r\n    // preparing the className\r\n    const shortNameClass = bps[bp].name;\r\n\r\n    // just if have a percentage\r\n    let nameClass = shortNameClass;\r\n    if (shortNameClass.includes('%')) {\r\n      nameClass = shortNameClass.replace(\r\n        shortNameClass,\r\n        percentageConverter(shortNameClass)\r\n      );\r\n    }\r\n\r\n    const finalPrefix = prefix ? prefix + '-' : '';\r\n    nameClass =\r\n      finalPrefix +\r\n      directive +\r\n      '-' +\r\n      nameClass\r\n        .replace(/\\//g, '\\\\/')\r\n        .replace(/:/g, '\\\\:')\r\n        .replace('@', '\\\\@')\r\n        .split('.')\r\n        .join('_');\r\n\r\n    // Property and value\r\n    let propAndVal;\r\n    if (directive === 'flex') {\r\n      propAndVal = bps[bp].value;\r\n      const flexImportant = shortNameClass.includes('!')\r\n        ? ';display:flex !important;'\r\n        : ';display:flex;';\r\n\r\n      // Searching a flex self inside. ['as' for 'align-self']\r\n      const attrsFlexSelfs = ['as']\r\n        .concat(flexAttrsSelf)\r\n        .filter((nameAttrFlex) => shortNameClass.includes(nameAttrFlex + ':'));\r\n      if (attrsFlexSelfs.length) {\r\n        // if the items number of flex selft (+1) is diferrent so exists other flex attribute. Example: as:ce jc:ce\r\n        if (attrsFlexSelfs.length + 1 !== shortNameClass.split(':').length) {\r\n          propAndVal += flexImportant;\r\n        }\r\n      } else {\r\n        propAndVal += flexImportant;\r\n      }\r\n    } else {\r\n      propAndVal = prop + ':' + bps[bp].value;\r\n    }\r\n\r\n    let rule = '@media screen and ';\r\n    let direct = false;\r\n    if (!bp.includes('-')) {\r\n      // no tiene until\r\n      if (sizes[bp]) {\r\n        rule += '(min-width: ' + sizes[bp] + 'px)';\r\n      } else {\r\n        rule = '.' + nameClass.replace(/!/g, '\\\\!') + '{' + propAndVal + '}';\r\n        direct = true;\r\n      }\r\n    } else {\r\n      const bpSplited = bp.split('-');\r\n      const bp1 = bpSplited[0];\r\n      if (bp1) rule += '(min-width: ' + sizes[bp1] + 'px) and ';\r\n      const bp2 = bpSplited[1];\r\n      rule += '(max-width: ' + (sizes[bp2] - 1) + 'px)';\r\n    }\r\n\r\n    if (!direct) {\r\n      rule += '{.' + nameClass.replace(/!/g, '\\\\!') + '{' + propAndVal + '}}';\r\n    }\r\n    styles[nameClass] = rule;\r\n  });\r\n  return styles;\r\n};\r\n\r\nexport default createStyles;\r\n","import { IStyles } from './createStyles';\r\n\r\nconst replaceList = [\r\n  ['/', ''],\r\n  ['\\\\', '/'],\r\n  ['/:', ':'],\r\n  ['\\\\:', ':'],\r\n  ['\\\\@', '@'],\r\n  ['/@', '@'],\r\n];\r\n\r\nconst nameCleaner = (objStyles: IStyles) => {\r\n  const obj: IStyles = {};\r\n  for (const name in objStyles) {\r\n    let newName = name;\r\n    replaceList.forEach((reItem) => {\r\n      newName = newName.split(reItem[0]).join(reItem[1]);\r\n    });\r\n    obj[newName] = objStyles[name];\r\n  }\r\n  return obj;\r\n};\r\n\r\nexport default nameCleaner;\r\n","import { TDirectiveName } from '../config/processors';\r\nimport insertRules from '../methods/insertRules';\r\nimport createStyles, { IStyles } from './createStyles';\r\nimport nameCleaner from './nameCleaner';\r\n\r\nexport interface IRBuildStyles {\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nexport interface IBpCals {\r\n  [bpName: string]: IRBuildStyles;\r\n}\r\n\r\nexport interface IBuildCss {\r\n  type: TDirectiveName;\r\n  bps: IBpCals;\r\n  deep: boolean;\r\n}\r\n\r\nconst buildCss = (data: IBuildCss): IStyles => {\r\n  // creating the styles\r\n  const objStyles = createStyles(data.type, data.bps);\r\n\r\n  // Inserting CSS rules\r\n  if (data.deep) {\r\n    insertRules(objStyles);\r\n  }\r\n\r\n  // name classes cleaner\r\n  return nameCleaner(objStyles);\r\n};\r\n\r\nexport default buildCss;\r\n","import prepareParam from '../helpers/prepareParam';\r\nimport regError from '../helpers/regError';\r\nimport calPercentage from '../helpers/calPercentage';\r\n\r\nimport buildCss, { IBpCals } from '../helpers/buildCss';\r\nimport getConfig from '../config/main';\r\nimport { IStyles } from '../helpers/createStyles';\r\n\r\nconst buildCols = (values: string, insertStyles = false): IStyles | Error => {\r\n  let cols: number[];\r\n  let bp;\r\n  const bpCals: IBpCals = {};\r\n  const config = getConfig();\r\n\r\n  // Getting numbers\r\n  let selectorName, propValue, paramPrepared;\r\n  const directBp = Object.keys(config.breakpoints)[0];\r\n\r\n  let err: boolean | Error = false;\r\n\r\n  for (const item of values.split(' ')) {\r\n    let param = item;\r\n    selectorName = param;\r\n    paramPrepared = prepareParam(param);\r\n    bp = paramPrepared.breakPoints;\r\n    param = paramPrepared.numbers;\r\n\r\n    if (param.includes('/')) {\r\n      const paramSplited = param.split('/');\r\n      cols = [Number(paramSplited[0]), Number(paramSplited[1])];\r\n    } else {\r\n      if (paramPrepared.widthBp) {\r\n        if (bp.includes('-')) {\r\n          err = regError(\r\n            'SyntaxError',\r\n            \"You can't determine a 'until breakpoint' when use the explicit columns max: \" +\r\n              values\r\n          );\r\n          break;\r\n        } else {\r\n          cols = [Number(param), config.cols[bp] as number];\r\n        }\r\n      } else {\r\n        cols = [Number(param), config.cols[directBp] as number];\r\n      }\r\n    }\r\n\r\n    propValue = calPercentage(cols[0], cols[1]);\r\n    if (paramPrepared.important) propValue += ' !important';\r\n\r\n    bpCals[bp] = {\r\n      name: selectorName,\r\n      value: propValue,\r\n    };\r\n  }\r\n\r\n  if (err) return err;\r\n\r\n  // Building the classNames and the styles to use.\r\n  return buildCss({\r\n    type: 'cols',\r\n    bps: bpCals,\r\n    deep: insertStyles,\r\n  });\r\n};\r\n\r\nexport default buildCols;\r\n","import { flexAttrsSelf, flexProsAndVals } from '../config/flex';\r\nimport getConfig from '../config/main';\r\n\r\nimport buildCss, { IBpCals } from '../helpers/buildCss';\r\nimport { IStyles } from '../helpers/createStyles';\r\nimport prepareParam from '../helpers/prepareParam';\r\nimport regError from '../helpers/regError';\r\n\r\nconst buildFlex = (valFlex: string, insertStyles = false): IStyles | Error => {\r\n  const bpCals: IBpCals = {};\r\n\r\n  // Getting numbers\r\n  let err: boolean | Error = false;\r\n  const config = getConfig();\r\n  const firstBp = Object.keys(config.breakpoints)[0];\r\n\r\n  for (const param of valFlex.split(' ')) {\r\n    let propVal;\r\n    let selectorName = param;\r\n    const paramPrepared = prepareParam(param);\r\n    const bpNames = paramPrepared.breakPoints;\r\n    const flexSplited = paramPrepared.numbers.split(':');\r\n    const nameProp = flexSplited[0] as keyof typeof flexProsAndVals; // 'fc' o 'or'\r\n    const valProp = flexSplited[1] as keyof typeof flexProsAndVals; // 'ce' o '1'\r\n\r\n    if (!flexAttrsSelf.includes(nameProp)) {\r\n      if (!flexProsAndVals[nameProp]) {\r\n        err = regError(\r\n          'Non-existent Alias',\r\n          \"Don't exists the alias '\" + nameProp + \"' in Flex vault.\"\r\n        );\r\n        break;\r\n      }\r\n      if (!flexProsAndVals[valProp]) {\r\n        err = regError(\r\n          'Non-existent Alias',\r\n          \"Don't exists the alias '\" + valProp + \"' in Flex vault.\"\r\n        );\r\n        break;\r\n      }\r\n      propVal = flexProsAndVals[nameProp] + ':' + flexProsAndVals[valProp];\r\n    } else {\r\n      propVal = flexProsAndVals[nameProp] + ':' + valProp;\r\n    }\r\n\r\n    if (paramPrepared.important) propVal += ' !important';\r\n\r\n    if (!bpCals[bpNames]) {\r\n      bpCals[bpNames] = {\r\n        name: selectorName,\r\n        value: propVal,\r\n      };\r\n    } else {\r\n      if (selectorName.includes('@')) selectorName = selectorName.split('@')[0];\r\n      const sufixBp = bpNames === firstBp ? '' : '@' + bpNames;\r\n      bpCals[bpNames].name =\r\n        bpCals[bpNames].name.split('@')[0] + '-' + selectorName + sufixBp;\r\n      bpCals[bpNames].value += ';' + propVal;\r\n    }\r\n  }\r\n\r\n  if (err) return err;\r\n\r\n  // Building the classNames and the styles to use.\r\n  return buildCss({\r\n    type: 'flex',\r\n    bps: bpCals,\r\n    deep: insertStyles,\r\n  });\r\n};\r\n\r\nexport default buildFlex;\r\n","import calPercentage from './calPercentage';\r\n\r\nconst relativeMeasures = ['%', 'rem', 'em', 'ex', 'vw', 'vh'];\r\n\r\nconst processedNumber = (n: string) => {\r\n  let nProcessed;\r\n  if (n.includes('/')) {\r\n    nProcessed = n.split('/');\r\n    nProcessed = calPercentage(\r\n      parseFloat(nProcessed[0]),\r\n      parseFloat(nProcessed[1])\r\n    );\r\n  } else if (n === 'auto') {\r\n    nProcessed = 'auto';\r\n  } else {\r\n    const relativeUnits = relativeMeasures.filter((unit) => {\r\n      return n.includes(unit);\r\n    });\r\n    if (relativeUnits.length) {\r\n      nProcessed = n;\r\n    } else {\r\n      nProcessed = n === '0' ? n : n + 'px';\r\n    }\r\n  }\r\n  return nProcessed;\r\n};\r\n\r\nexport default processedNumber;\r\n","import { TDirectiveName } from '../config/processors';\r\nimport buildCss, { IBpCals } from './buildCss';\r\nimport prepareParam from './prepareParam';\r\nimport processedNumber from './processedNumber';\r\n\r\nconst buildAttr = (\r\n  values: string,\r\n  prop: TDirectiveName,\r\n  insertStyles = false\r\n) => {\r\n  const bpCals: IBpCals = {};\r\n\r\n  values.split(' ').forEach((param) => {\r\n    const paramProcessed = prepareParam(param);\r\n    const bpNames = paramProcessed.breakPoints;\r\n\r\n    // processing number values\r\n    let propValue = paramProcessed.numbers\r\n      .split('-')\r\n      .map((n) => processedNumber(n))\r\n      .join(' ');\r\n    if (paramProcessed.important) propValue += ' !important';\r\n    bpCals[bpNames] = {\r\n      name: param,\r\n      value: propValue,\r\n    };\r\n  });\r\n\r\n  // Building the classNames and the styles to use.\r\n  return buildCss({\r\n    type: prop,\r\n    bps: bpCals,\r\n    deep: insertStyles,\r\n  });\r\n};\r\n\r\nexport default buildAttr;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPad = (valPads: string, insertStyles = false) => {\r\n  return buildAttr(valPads, 'pad', insertStyles);\r\n};\r\n\r\nexport default buildPad;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPadTop = (valPadTop: string, insertStyles = false) => {\r\n  return buildAttr(valPadTop, 'padt', insertStyles);\r\n};\r\n\r\nexport default buildPadTop;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPadRight = (valPadRight: string, insertStyles = false) => {\r\n  return buildAttr(valPadRight, 'padr', insertStyles);\r\n};\r\n\r\nexport default buildPadRight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPadBottom = (valPadBottom: string, insertStyles = false) => {\r\n  return buildAttr(valPadBottom, 'padb', insertStyles);\r\n};\r\n\r\nexport default buildPadBottom;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildPadLeft = (valPadLeft: string, insertStyles = false) => {\r\n  return buildAttr(valPadLeft, 'padl', insertStyles);\r\n};\r\n\r\nexport default buildPadLeft;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMar = (valMars: string, insertStyles = false) => {\r\n  return buildAttr(valMars, 'mar', insertStyles);\r\n};\r\n\r\nexport default buildMar;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMarTop = (valMarTop: string, insertStyles = false) => {\r\n  return buildAttr(valMarTop, 'mart', insertStyles);\r\n};\r\n\r\nexport default buildMarTop;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMarRight = (valMarRight: string, insertStyles = false) => {\r\n  return buildAttr(valMarRight, 'marr', insertStyles);\r\n};\r\n\r\nexport default buildMarRight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMarBottom = (valMarBottom: string, insertStyles = false) => {\r\n  return buildAttr(valMarBottom, 'marb', insertStyles);\r\n};\r\n\r\nexport default buildMarBottom;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMarLeft = (valMarLeft: string, insertStyles = false) => {\r\n  return buildAttr(valMarLeft, 'marl', insertStyles);\r\n};\r\n\r\nexport default buildMarLeft;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMaxWidth = (valMaxWidth: string, insertStyles = false) => {\r\n  return buildAttr(valMaxWidth, 'mxw', insertStyles);\r\n};\r\n\r\nexport default buildMaxWidth;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMaxHeight = (valMaxHeight: string, insertStyles = false) => {\r\n  return buildAttr(valMaxHeight, 'mxh', insertStyles);\r\n};\r\n\r\nexport default buildMaxHeight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMinWidth = (valMinWidth: string, insertStyles = false) => {\r\n  return buildAttr(valMinWidth, 'miw', insertStyles);\r\n};\r\n\r\nexport default buildMinWidth;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildMinHeight = (valMinHeight: string, insertStyles = false) => {\r\n  return buildAttr(valMinHeight, 'mih', insertStyles);\r\n};\r\n\r\nexport default buildMinHeight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildHeight = (valHeight: string, insertStyles = false) => {\r\n  return buildAttr(valHeight, 'hgt', insertStyles);\r\n};\r\n\r\nexport default buildHeight;\r\n","import buildAttr from '../helpers/buildAttr';\r\n\r\nconst buildWidth = (valWidth: string, insertStyles = false) => {\r\n  return buildAttr(valWidth, 'wdh', insertStyles);\r\n};\r\n\r\nexport default buildWidth;\r\n","import { processors, TDirectiveName } from '../config/processors';\r\nimport buildCols from './buildCols';\r\nimport buildFlex from './buildFlex';\r\nimport buildPad from './buildPad';\r\nimport buildPadTop from './buildPadTop';\r\nimport buildPadRight from './buildPadRight';\r\nimport buildPadBottom from './buildPadBottom';\r\nimport buildPadLeft from './buildPadLeft';\r\nimport buildMar from './buildMar';\r\nimport buildMarTop from './buildMarTop';\r\nimport buildMarRight from './buildMarRight';\r\nimport buildMarBottom from './buildMarBottom';\r\nimport buildMarLeft from './buildMarLeft';\r\nimport buildMaxWidth from './buildMaxWidth';\r\nimport buildMaxHeight from './buildMaxHeight';\r\nimport buildMinWidth from './buildMinWidth';\r\nimport buildMinHeight from './buildMinHeight';\r\nimport buildHeight from './buildHeight';\r\nimport buildWidth from './buildWidth';\r\nimport { IStyles } from '../helpers/createStyles';\r\n\r\nconst builders = {\r\n  buildCols,\r\n  buildFlex,\r\n  buildPad,\r\n  buildPadTop,\r\n  buildPadRight,\r\n  buildPadBottom,\r\n  buildPadLeft,\r\n  buildMar,\r\n  buildMarTop,\r\n  buildMarRight,\r\n  buildMarBottom,\r\n  buildMarLeft,\r\n  buildMaxWidth,\r\n  buildMaxHeight,\r\n  buildMinWidth,\r\n  buildMinHeight,\r\n  buildHeight,\r\n  buildWidth,\r\n};\r\n\r\nexport interface IBuildResult {\r\n  [prop: string]: IStyles | boolean;\r\n}\r\n\r\nconst build = (\r\n  obj: Partial<Record<TDirectiveName, string>>,\r\n  insertStyles = false\r\n): Partial<IBuildResult> | Error => {\r\n  const rObj: Partial<IBuildResult> = {};\r\n  let err: Error | boolean = false;\r\n  for (const prop in obj) {\r\n    const propData = processors[prop as TDirectiveName];\r\n    const objStyles: IStyles | Error = builders[\r\n      propData.build as keyof typeof builders\r\n    ](obj[prop as TDirectiveName] as string, insertStyles);\r\n    if (objStyles instanceof Error) {\r\n      err = objStyles;\r\n      break;\r\n    } else {\r\n      rObj[prop] = objStyles;\r\n    }\r\n  }\r\n  if (err) return err;\r\n  return rObj;\r\n};\r\n\r\nexport default build;\r\n","const addClasses = (\r\n  Node: HTMLElement | Element,\r\n  classesNames: string,\r\n  overwrite?: boolean\r\n): Promise<void> => {\r\n  return new Promise((resolve) => {\r\n    const names = classesNames.split(' ');\r\n    let classesToAdd: string[] = names;\r\n    if (!overwrite) {\r\n      classesToAdd = names.filter((name) => !Node.classList.contains(name));\r\n      if (!classesToAdd.length) {\r\n        resolve();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const obsNode = new MutationObserver((mutations) => {\r\n      const target = mutations[0].target;\r\n      const currentClasses = (target as Element).className.split(' ');\r\n      const containsAll = names.every((element) =>\r\n        currentClasses.includes(element)\r\n      );\r\n      if (containsAll) {\r\n        obsNode.disconnect();\r\n        resolve();\r\n      }\r\n    });\r\n    obsNode.observe(Node, {\r\n      childList: false,\r\n      subtree: false,\r\n      attributes: true,\r\n      attributeFilter: ['class'],\r\n      characterData: false,\r\n    });\r\n\r\n    if (overwrite) {\r\n      Node.className = classesNames;\r\n    } else {\r\n      const space = Node.hasAttribute('class') ? ' ' : '';\r\n      Node.className += space + classesToAdd.join(' ');\r\n    }\r\n  });\r\n};\r\n\r\nexport default addClasses;\r\n","export const removeProp = (\r\n  Node: HTMLElement | Element,\r\n  propName: string\r\n): Promise<void> => {\r\n  return new Promise((resolve) => {\r\n    if (!Node.hasAttribute(propName)) {\r\n      resolve();\r\n      return;\r\n    }\r\n    const obsNode = new MutationObserver(() => {\r\n      obsNode.disconnect();\r\n      resolve();\r\n    });\r\n    obsNode.observe(Node, {\r\n      childList: false,\r\n      subtree: false,\r\n      attributes: true,\r\n      attributeFilter: [propName],\r\n      characterData: false,\r\n    });\r\n    Node.removeAttribute(propName);\r\n  });\r\n};\r\n\r\nexport const removeProps = (\r\n  Node: HTMLElement | Element,\r\n  propNames: string[]\r\n): Promise<void> => {\r\n  return new Promise((resolve) => {\r\n    const promises = propNames.map((name) => removeProp(Node, name));\r\n    Promise.all(promises).then(() => resolve());\r\n  });\r\n};\r\n\r\nconst removeAttr = (\r\n  Node: HTMLElement | Element,\r\n  propNames: string | string[]\r\n): Promise<void> => {\r\n  return new Promise((resolve) => {\r\n    if (Array.isArray(propNames)) {\r\n      removeProps(Node, propNames).then(resolve);\r\n    } else {\r\n      removeProp(Node, propNames).then(resolve);\r\n    }\r\n  });\r\n};\r\n\r\nexport default removeAttr;\r\n","import addClasses from '../utils/addClasses';\r\nimport { IStyles } from '../helpers/createStyles';\r\nimport regError from '../helpers/regError';\r\nimport build, { IBuildResult } from './build';\r\nimport getParameters from './getParameters';\r\nimport removeAttr from '../utils/removeAttr';\r\nimport { TDirectiveName } from '../config/processors';\r\n\r\nconst set = (\r\n  Node: HTMLElement | Element,\r\n  parameters?: Partial<Record<TDirectiveName, string>>\r\n): Promise<void | Error> => {\r\n  return new Promise((resolve, reject) => {\r\n    const params = parameters || getParameters(Node);\r\n    const arrParams = Object.keys(params);\r\n    if (!arrParams.length) {\r\n      const err = regError(\r\n        'Parameter Missing',\r\n        \"don't exists any parameter to process\",\r\n        Node\r\n      );\r\n      reject(err);\r\n      return;\r\n    }\r\n\r\n    const toBuild: Partial<Record<TDirectiveName, string>> = {};\r\n    for (const prop in params) {\r\n      toBuild[prop as TDirectiveName] = params[prop as TDirectiveName];\r\n    }\r\n\r\n    // creating classes names and inserting that classes to the core\r\n    const classesObj = build(toBuild as Record<TDirectiveName, string>, true);\r\n    if (classesObj instanceof Error) {\r\n      reject(classesObj);\r\n      return;\r\n    }\r\n\r\n    // adding classes\r\n    const classes = classesObj as Partial<IBuildResult>;\r\n    const classesNames = Object.keys(classes)\r\n      .map((name: string) => Object.keys(classes[name] as IStyles))\r\n      .flat()\r\n      .join(' ');\r\n\r\n    // removing unnecessary props\r\n    removeAttr(Node, arrParams)\r\n      .then(() => addClasses(Node, classesNames))\r\n      .then(() => {\r\n        resolve();\r\n        const event = new CustomEvent('layout:ready');\r\n        Node.dispatchEvent(event);\r\n      });\r\n  });\r\n};\r\n\r\nexport default set;\r\n","import addClasses from '../utils/addClasses';\r\nimport regError from '../helpers/regError';\r\nimport buildFlex from './buildFlex';\r\nimport removeAttr from '../utils/removeAttr';\r\n\r\nconst setFlex = (\r\n  Node: HTMLElement | Element,\r\n  flexValues?: string\r\n): Promise<void | Error> => {\r\n  return new Promise((resolve, reject) => {\r\n    const values = flexValues || Node.getAttribute('flex');\r\n    if (!values) {\r\n      const err = regError(\r\n        'Empty',\r\n        'The value of the directive \"flex\" is empty',\r\n        Node\r\n      );\r\n      reject(err);\r\n      return;\r\n    }\r\n\r\n    // Creating, inserting, and adding classNames of rules in Node.\r\n    const objStyles = buildFlex(values, true);\r\n    if (objStyles instanceof Error) {\r\n      reject(objStyles);\r\n      return;\r\n    }\r\n\r\n    const classesToAdd = Object.keys(objStyles).join(' ');\r\n\r\n    // removing prop of Node and adding the corresponding classes\r\n    removeAttr(Node, 'flex')\r\n      .then(() => addClasses(Node, classesToAdd))\r\n      .then(() => {\r\n        resolve();\r\n        const event = new CustomEvent('layout:ready');\r\n        Node.dispatchEvent(event);\r\n      });\r\n  });\r\n};\r\n\r\nexport default setFlex;\r\n","import addClasses from '../utils/addClasses';\r\nimport regError from '../helpers/regError';\r\nimport buildCols from './buildCols';\r\nimport removeAttr from '../utils/removeAttr';\r\n\r\nconst setCols = (\r\n  Node: HTMLElement | Element,\r\n  columns?: string\r\n): Promise<void | Error> => {\r\n  return new Promise((resolve, reject) => {\r\n    const values = columns || Node.getAttribute('cols');\r\n    if (!values) {\r\n      const err = regError(\r\n        'Empty',\r\n        \"The value of the directive 'cols' is empty\",\r\n        Node\r\n      );\r\n      reject(err);\r\n      return;\r\n    }\r\n\r\n    // Creating, inserting, and adding classNames of rules in Node.\r\n    const objStyles = buildCols(values, true);\r\n    if (objStyles instanceof Error) {\r\n      reject(objStyles);\r\n      return;\r\n    }\r\n    const classesToAdd = Object.keys(objStyles).join(' ');\r\n\r\n    // removing prop of Node and adding the corresponding classes\r\n    removeAttr(Node, 'cols')\r\n      .then(() => addClasses(Node, classesToAdd))\r\n      .then(() => {\r\n        resolve();\r\n        const event = new CustomEvent('layout:ready');\r\n        Node.dispatchEvent(event);\r\n      });\r\n  });\r\n};\r\n\r\nexport default setCols;\r\n","import addClasses from '../utils/addClasses';\r\nimport buildAttr from '../helpers/buildAttr';\r\nimport regError from '../helpers/regError';\r\nimport removeAttr from '../utils/removeAttr';\r\nimport { TDirectiveName } from '../config/processors';\r\n\r\nconst setAttr = (\r\n  Node: HTMLElement | Element,\r\n  directive: TDirectiveName,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return new Promise((resolve, reject) => {\r\n    const directiveValues = values || Node.getAttribute(directive);\r\n    if (!directiveValues) {\r\n      const err = regError(\r\n        'Empty',\r\n        'The value of the directive \"' + directive + '\" is empty',\r\n        Node\r\n      );\r\n      reject(err);\r\n      return;\r\n    }\r\n\r\n    // Creating, inserting, and adding classNames of rules in Node.\r\n    const objStyles = buildAttr(directiveValues, directive, true);\r\n    const classesToAdd = Object.keys(objStyles).join(' ');\r\n\r\n    // removing prop of Node and adding the corresponding classes\r\n    removeAttr(Node, directive)\r\n      .then(() => addClasses(Node, classesToAdd))\r\n      .then(() => {\r\n        resolve();\r\n        const event = new CustomEvent('layout:ready');\r\n        Node.dispatchEvent(event);\r\n      });\r\n  });\r\n};\r\n\r\nexport default setAttr;\r\n","import setAttr from './setAttr';\r\n\r\nconst setHeight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'hgt', values);\r\n};\r\n\r\nexport default setHeight;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMarBottom = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'marb', values);\r\n};\r\n\r\nexport default setMarBottom;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMarLeft = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'marl', values);\r\n};\r\n\r\nexport default setMarLeft;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMarRight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'marr', values);\r\n};\r\n\r\nexport default setMarRight;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMar = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mar', values);\r\n};\r\n\r\nexport default setMar;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMarTop = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mart', values);\r\n};\r\n\r\nexport default setMarTop;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMaxWidth = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mxw', values);\r\n};\r\n\r\nexport default setMaxWidth;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMinHeight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mih', values);\r\n};\r\n\r\nexport default setMinHeight;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMinWidth = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'miw', values);\r\n};\r\n\r\nexport default setMinWidth;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPadBottom = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'padb', values);\r\n};\r\n\r\nexport default setPadBottom;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPadLeft = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'padl', values);\r\n};\r\n\r\nexport default setPadLeft;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPadRight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'padr', values);\r\n};\r\n\r\nexport default setPadRight;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPad = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'pad', values);\r\n};\r\n\r\nexport default setPad;\r\n","import setAttr from './setAttr';\r\n\r\nconst setPadTop = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'padt', values);\r\n};\r\n\r\nexport default setPadTop;\r\n","import setAttr from './setAttr';\r\n\r\nconst setWidth = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'wdh', values);\r\n};\r\n\r\nexport default setWidth;\r\n","import setAttr from './setAttr';\r\n\r\nconst setMaxHeight = (\r\n  Node: HTMLElement | Element,\r\n  values?: string\r\n): Promise<void | Error> => {\r\n  return setAttr(Node, 'mxh', values);\r\n};\r\n\r\nexport default setMaxHeight;\r\n","import { processors } from '../config/processors';\r\nimport addClasses from '../utils/addClasses';\r\nimport removeAttr from '../utils/removeAttr';\r\n\r\nconst reset = (Node: HTMLElement | Element): Promise<void> => {\r\n  return new Promise((resolve) => {\r\n    const layouterClasses = Object.keys(processors);\r\n    const restClass: string[] = [];\r\n    Node.className.split(' ').filter((name) => {\r\n      // the name of a class with minus of 4 letters dont follow the syntax of a class name created by the system, so is a normal class name\r\n      if (name.length < 4) {\r\n        restClass.push(name);\r\n        return false;\r\n      }\r\n      const nPrex = name.length >= 5 ? 5 : 4;\r\n      let prex = name.substring(0, nPrex);\r\n      const lineIndex = prex.split('').indexOf('-');\r\n      // if the class name haven't a line can't be a class name created by the system\r\n      if (lineIndex === -1) {\r\n        restClass.push(name);\r\n        return false;\r\n      }\r\n      prex = prex.substring(0, lineIndex);\r\n      // if the extraction of the prefix of the class name follow the name of a directive is a class name created by the system\r\n      if (layouterClasses.includes(prex)) {\r\n        return true;\r\n      } else {\r\n        // if dont, so is a coincidence, but is not a valid class name created by the system\r\n        restClass.push(name);\r\n        return false;\r\n      }\r\n    });\r\n    if (restClass.length) {\r\n      const classesName = restClass.join(' ');\r\n      addClasses(Node, classesName, true).then(() => {\r\n        resolve();\r\n      });\r\n    } else {\r\n      removeAttr(Node, 'class').then(() => {\r\n        resolve();\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexport default reset;\r\n","import { ILayouter } from './../layouter';\r\nimport { processors } from '../config/processors';\r\n\r\nconst initAutoProcessor = (layouter: ILayouter) => {\r\n  return new Promise((resolve) => {\r\n    const props = Object.keys(processors);\r\n    const attrs = props.map((prop) => `[${prop}]`).join(', ');\r\n    const nodes = document.querySelectorAll(attrs);\r\n    const setNodes = new Set();\r\n    Array.prototype.forEach.call(nodes, (itemNode) => {\r\n      setNodes.add(itemNode);\r\n    });\r\n    const promises: Promise<void | Error>[] = [];\r\n    setNodes.forEach((node) => {\r\n      promises.push(layouter.set(node as Element | HTMLElement));\r\n    });\r\n    Promise.all(promises).then(resolve);\r\n  });\r\n};\r\n\r\nexport default initAutoProcessor;\r\n","import { ILayouter } from './../layouter';\r\nimport { processors } from '../config/processors';\r\n\r\nconst mainObserver = (layouter: ILayouter) => {\r\n  const props = Object.keys(processors);\r\n  const obsBody = new MutationObserver((mutations) => {\r\n    for (const mutation of mutations) {\r\n      if (mutation.type === 'childList') {\r\n        if (!mutation.addedNodes.length) {\r\n          continue;\r\n        }\r\n        mutation.addedNodes.forEach((node) => {\r\n          if (node instanceof HTMLElement) {\r\n            const props = layouter.getParameters(node);\r\n            if (Object.keys(props).length) {\r\n              layouter.set(node, props);\r\n            }\r\n          }\r\n        });\r\n      } else if (mutation.type === 'attributes') {\r\n        const node = mutation.target;\r\n        if (node instanceof HTMLElement) {\r\n          const props = layouter.getParameters(node);\r\n          if (Object.keys(props).length) {\r\n            layouter.set(node, props);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n  const observerOptions = {\r\n    childList: true,\r\n    subtree: true,\r\n    attributes: true,\r\n    attributeFilter: props,\r\n    characterData: false,\r\n  };\r\n  obsBody.observe(document.body, observerOptions);\r\n};\r\n\r\nexport default mainObserver;\r\n","import { IConfig, IConfigUser, setConfig, updateConfig } from './config/main';\nimport getParameters from './methods/getParameters';\n\nimport build from './methods/build';\nimport buildCols from './methods/buildCols';\nimport buildFlex from './methods/buildFlex';\nimport buildPad from './methods/buildPad';\nimport buildPadTop from './methods/buildPadTop';\nimport buildPadRight from './methods/buildPadRight';\nimport buildPadBottom from './methods/buildPadBottom';\nimport buildPadLeft from './methods/buildPadLeft';\nimport buildMar from './methods/buildMar';\nimport buildMarTop from './methods/buildMarTop';\nimport buildMarRight from './methods/buildMarRight';\nimport buildMarBottom from './methods/buildMarBottom';\nimport buildMarLeft from './methods/buildMarLeft';\nimport buildMaxWidth from './methods/buildMaxWidth';\nimport buildMaxHeight from './methods/buildMaxHeight';\nimport buildMinWidth from './methods/buildMinWidth';\nimport buildMinHeight from './methods/buildMinHeight';\nimport buildHeight from './methods/buildHeight';\nimport buildWidth from './methods/buildWidth';\n\nimport set from './methods/set';\nimport setFlex from './methods/setFlex';\nimport setCols from './methods/SetCols';\nimport setHeight from './methods/setHeight';\nimport setMarBottom from './methods/setMarBottom';\nimport setMarLeft from './methods/setMarLeft';\nimport setMarRight from './methods/setMarRight';\nimport setMar from './methods/setMar';\nimport setMarTop from './methods/setMarTop';\nimport setMaxWidth from './methods/setMaxWidth';\nimport setMinHeight from './methods/setMinHeight';\nimport setMinWidth from './methods/setMinWidth';\nimport setPadBottom from './methods/setPadBottom';\nimport setPadLeft from './methods/setPadLeft';\nimport setPadRight from './methods/setPadRight';\nimport setPad from './methods/setPad';\nimport setPadTop from './methods/setPadTop';\nimport setWidth from './methods/setWidth';\nimport setMaxHeight from './methods/setMaxHeight';\n\nimport insertRules from './methods/insertRules';\nimport reset from './methods/reset';\n\nimport { IStyles } from './helpers/createStyles';\nimport { IBuildResult } from './methods/build';\nimport initAutoProcessor from './helpers/initAutoProcessor';\nimport mainObserver from './helpers/mainObserver';\nimport { TDirectiveName } from './config/processors';\n\nexport interface ILayouter extends IConfig {\n  getParameters: (\n    Node: HTMLElement | Element\n  ) => Partial<Record<TDirectiveName, string>>;\n  updateConfig: (userConfig: Partial<Omit<IConfigUser, 'bridge'>>) => IConfig;\n  build: (\n    obj: Partial<Record<TDirectiveName, string>>,\n    insertStyles?: boolean\n  ) => Partial<IBuildResult> | Error;\n  buildCols: (valCols: string, insertStyles?: boolean) => IStyles | Error;\n  buildFlex: (valFlex: string, insertStyles?: boolean) => IStyles | Error;\n  buildPad: (valPads: string, insertStyles?: boolean) => IStyles | boolean;\n  buildPadTop: (valPadTop: string, insertStyles?: boolean) => IStyles | boolean;\n  buildPadRight: (\n    valPadRight: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildPadBottom: (\n    valPadBottom: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildPadLeft: (\n    valPadLeft: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMar: (valMars: string, insertStyles?: boolean) => IStyles | boolean;\n  buildMarTop: (valMarTop: string, insertStyles?: boolean) => IStyles | boolean;\n  buildMarRight: (\n    valMarRight: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMarBottom: (\n    valMarBottom: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMarLeft: (\n    valMarLeft: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMaxWidth: (\n    valMaxWidth: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMaxHeight: (\n    valMaxHeight: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMinWidth: (\n    valMinWidth: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildMinHeight: (\n    valMinHeight: string,\n    insertStyles?: boolean\n  ) => IStyles | boolean;\n  buildHeight: (valHeight: string, insertStyles?: boolean) => IStyles | boolean;\n  buildWidth: (valWidth: string, insertStyles?: boolean) => IStyles | boolean;\n  set: (\n    Node: HTMLElement | Element,\n    parameters?: Partial<Record<TDirectiveName, string>>\n  ) => Promise<void | Error>;\n  setCols: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setFlex: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMar: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarTop: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarRight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarBottom: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMarLeft: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPad: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadTop: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadRight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadBottom: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setPadLeft: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMinWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMaxWidth: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMinHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  setMaxHeight: (\n    Node: HTMLElement | Element,\n    values?: string\n  ) => Promise<void | Error>;\n  insertRules: (objStyles: IStyles) => void;\n  reset: (Node: HTMLElement | Element) => Promise<void>;\n  version: string;\n}\n\ndeclare global {\n  interface Window {\n    layouter: ILayouter;\n  }\n}\n\nconst layouter = (userConfig: Partial<IConfigUser> = {}): ILayouter => {\n  const config = setConfig(userConfig);\n\n  const instance = {\n    ...config,\n    getParameters,\n    updateConfig,\n    insertRules,\n    build,\n    buildCols,\n    buildFlex,\n    buildPad,\n    buildPadTop,\n    buildPadRight,\n    buildPadBottom,\n    buildPadLeft,\n    buildMar,\n    buildMarTop,\n    buildMarRight,\n    buildMarBottom,\n    buildMarLeft,\n    buildMaxWidth,\n    buildMaxHeight,\n    buildMinWidth,\n    buildMinHeight,\n    buildHeight,\n    buildWidth,\n    set,\n    setCols,\n    setFlex,\n    setMar,\n    setMarTop,\n    setMarRight,\n    setMarBottom,\n    setMarLeft,\n    setPad,\n    setPadTop,\n    setPadRight,\n    setPadBottom,\n    setPadLeft,\n    setWidth,\n    setMinWidth,\n    setMaxWidth,\n    setHeight,\n    setMinHeight,\n    setMaxHeight,\n    reset,\n  };\n\n  // Auto init process\n  initAutoProcessor(instance).then(() => {\n    if (instance.ready) instance.ready(instance);\n    mainObserver(instance);\n  });\n\n  return instance;\n};\n\nif (typeof window !== 'undefined' && typeof exports === 'undefined') {\n  window.layouter = layouter();\n}\n\nexport default layouter;\n"],"names":["config"],"mappings":"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"}